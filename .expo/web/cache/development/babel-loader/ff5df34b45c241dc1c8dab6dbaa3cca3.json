{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Svg, { Defs, G, Path, Rect, Image, ClipPath, LinearGradient, Stop } from 'react-native-svg';\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar renderLogo = function renderLogo(_ref) {\n  var size = _ref.size,\n      logo = _ref.logo,\n      logoSize = _ref.logoSize,\n      logoBackgroundColor = _ref.logoBackgroundColor,\n      logoMargin = _ref.logoMargin,\n      logoBorderRadius = _ref.logoBorderRadius;\n  var logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  var logoBackgroundSize = logoSize + logoMargin * 2;\n  var logoBackgroundBorderRadius = logoBorderRadius + logoMargin / logoSize * logoBorderRadius;\n  return _jsxs(G, {\n    x: logoPosition,\n    y: logoPosition,\n    children: [_jsxs(Defs, {\n      children: [_jsx(ClipPath, {\n        id: \"clip-logo-background\",\n        children: _jsx(Rect, {\n          width: logoBackgroundSize,\n          height: logoBackgroundSize,\n          rx: logoBackgroundBorderRadius,\n          ry: logoBackgroundBorderRadius\n        })\n      }), _jsx(ClipPath, {\n        id: \"clip-logo\",\n        children: _jsx(Rect, {\n          width: logoSize,\n          height: logoSize,\n          rx: logoBorderRadius,\n          ry: logoBorderRadius\n        })\n      })]\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        width: logoBackgroundSize,\n        height: logoBackgroundSize,\n        fill: logoBackgroundColor,\n        clipPath: \"url(#clip-logo-background)\"\n      })\n    }), _jsx(G, {\n      x: logoMargin,\n      y: logoMargin,\n      children: _jsx(Image, {\n        width: logoSize,\n        height: logoSize,\n        preserveAspectRatio: \"xMidYMid slice\",\n        href: logo,\n        clipPath: \"url(#clip-logo)\"\n      })\n    })]\n  });\n};\n\nvar QRCode = function QRCode(_ref2) {\n  var _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? 'this is a QR code' : _ref2$value,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 100 : _ref2$size,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'black' : _ref2$color,\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? 'white' : _ref2$backgroundColor,\n      logo = _ref2.logo,\n      _ref2$logoSize = _ref2.logoSize,\n      logoSize = _ref2$logoSize === void 0 ? size * 0.2 : _ref2$logoSize,\n      _ref2$logoBackgroundC = _ref2.logoBackgroundColor,\n      logoBackgroundColor = _ref2$logoBackgroundC === void 0 ? 'transparent' : _ref2$logoBackgroundC,\n      _ref2$logoMargin = _ref2.logoMargin,\n      logoMargin = _ref2$logoMargin === void 0 ? 2 : _ref2$logoMargin,\n      _ref2$logoBorderRadiu = _ref2.logoBorderRadius,\n      logoBorderRadius = _ref2$logoBorderRadiu === void 0 ? 0 : _ref2$logoBorderRadiu,\n      _ref2$quietZone = _ref2.quietZone,\n      quietZone = _ref2$quietZone === void 0 ? 0 : _ref2$quietZone,\n      _ref2$enableLinearGra = _ref2.enableLinearGradient,\n      enableLinearGradient = _ref2$enableLinearGra === void 0 ? false : _ref2$enableLinearGra,\n      _ref2$gradientDirecti = _ref2.gradientDirection,\n      gradientDirection = _ref2$gradientDirecti === void 0 ? ['0%', '0%', '100%', '100%'] : _ref2$gradientDirecti,\n      _ref2$linearGradient = _ref2.linearGradient,\n      linearGradient = _ref2$linearGradient === void 0 ? ['rgb(255,0,0)', 'rgb(0,255,255)'] : _ref2$linearGradient,\n      _ref2$ecl = _ref2.ecl,\n      ecl = _ref2$ecl === void 0 ? 'M' : _ref2$ecl,\n      getRef = _ref2.getRef,\n      onError = _ref2.onError;\n  var result = useMemo(function () {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n\n  if (!result) {\n    return null;\n  }\n\n  var path = result.path,\n      cellSize = result.cellSize;\n  return _jsxs(Svg, {\n    ref: getRef,\n    viewBox: [-quietZone, -quietZone, size + quietZone * 2, size + quietZone * 2].join(' '),\n    width: size,\n    height: size,\n    children: [_jsx(Defs, {\n      children: _jsxs(LinearGradient, {\n        id: \"grad\",\n        x1: gradientDirection[0],\n        y1: gradientDirection[1],\n        x2: gradientDirection[2],\n        y2: gradientDirection[3],\n        children: [_jsx(Stop, {\n          offset: \"0\",\n          stopColor: linearGradient[0],\n          stopOpacity: \"1\"\n        }), _jsx(Stop, {\n          offset: \"1\",\n          stopColor: linearGradient[1],\n          stopOpacity: \"1\"\n        })]\n      })\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        x: -quietZone,\n        y: -quietZone,\n        width: size + quietZone * 2,\n        height: size + quietZone * 2,\n        fill: backgroundColor\n      })\n    }), _jsx(G, {\n      children: _jsx(Path, {\n        d: path,\n        strokeLinecap: \"butt\",\n        stroke: enableLinearGradient ? 'url(#grad)' : color,\n        strokeWidth: cellSize\n      })\n    }), logo && renderLogo({\n      size: size,\n      logo: logo,\n      logoSize: logoSize,\n      logoBackgroundColor: logoBackgroundColor,\n      logoMargin: logoMargin,\n      logoBorderRadius: logoBorderRadius\n    })]\n  });\n};\n\nexport default QRCode;","map":{"version":3,"names":["React","useMemo","Svg","Defs","G","Path","Rect","Image","ClipPath","LinearGradient","Stop","genMatrix","transformMatrixIntoPath","renderLogo","size","logo","logoSize","logoBackgroundColor","logoMargin","logoBorderRadius","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","QRCode","value","color","backgroundColor","quietZone","enableLinearGradient","gradientDirection","linearGradient","ecl","getRef","onError","result","error","path","cellSize","join"],"sources":["C:/Users/DELL/Documents/ReactNative/Smartendance/node_modules/react-native-qrcode-svg/src/index.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport Svg, {\n  Defs,\n  G,\n  Path,\n  Rect,\n  Image,\n  ClipPath,\n  LinearGradient,\n  Stop\n} from 'react-native-svg'\nimport genMatrix from './genMatrix'\nimport transformMatrixIntoPath from './transformMatrixIntoPath'\n\nconst renderLogo = ({\n  size,\n  logo,\n  logoSize,\n  logoBackgroundColor,\n  logoMargin,\n  logoBorderRadius\n}) => {\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2\n  const logoBackgroundSize = logoSize + logoMargin * 2\n  const logoBackgroundBorderRadius =\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius\n\n  return (\n    <G x={logoPosition} y={logoPosition}>\n      <Defs>\n        <ClipPath id='clip-logo-background'>\n          <Rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBackgroundBorderRadius}\n            ry={logoBackgroundBorderRadius}\n          />\n        </ClipPath>\n        <ClipPath id='clip-logo'>\n          <Rect\n            width={logoSize}\n            height={logoSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n          />\n        </ClipPath>\n      </Defs>\n      <G>\n        <Rect\n          width={logoBackgroundSize}\n          height={logoBackgroundSize}\n          fill={logoBackgroundColor}\n          clipPath='url(#clip-logo-background)'\n        />\n      </G>\n      <G x={logoMargin} y={logoMargin}>\n        <Image\n          width={logoSize}\n          height={logoSize}\n          preserveAspectRatio='xMidYMid slice'\n          href={logo}\n          clipPath='url(#clip-logo)'\n        />\n      </G>\n    </G>\n  )\n}\n\nconst QRCode = ({\n  value = 'this is a QR code',\n  size = 100,\n  color = 'black',\n  backgroundColor = 'white',\n  logo,\n  logoSize = size * 0.2,\n  logoBackgroundColor = 'transparent',\n  logoMargin = 2,\n  logoBorderRadius = 0,\n  quietZone = 0,\n  enableLinearGradient = false,\n  gradientDirection = ['0%', '0%', '100%', '100%'],\n  linearGradient = ['rgb(255,0,0)', 'rgb(0,255,255)'],\n  ecl = 'M',\n  getRef,\n  onError\n}) => {\n  const result = useMemo(() => {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size)\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error)\n      } else {\n        // Pass the error when no handler presented\n        throw error\n      }\n    }\n  }, [value, size, ecl])\n\n  if (!result) {\n    return null\n  }\n\n  const { path, cellSize } = result\n\n  return (\n    <Svg\n      ref={getRef}\n      viewBox={[\n        -quietZone,\n        -quietZone,\n        size + quietZone * 2,\n        size + quietZone * 2\n      ].join(' ')}\n      width={size}\n      height={size}\n    >\n      <Defs>\n        <LinearGradient\n          id='grad'\n          x1={gradientDirection[0]}\n          y1={gradientDirection[1]}\n          x2={gradientDirection[2]}\n          y2={gradientDirection[3]}\n        >\n          <Stop offset='0' stopColor={linearGradient[0]} stopOpacity='1' />\n          <Stop offset='1' stopColor={linearGradient[1]} stopOpacity='1' />\n        </LinearGradient>\n      </Defs>\n      <G>\n        <Rect\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n        />\n      </G>\n      <G>\n        <Path\n          d={path}\n          strokeLinecap='butt'\n          stroke={enableLinearGradient ? 'url(#grad)' : color}\n          strokeWidth={cellSize}\n        />\n      </G>\n      {logo &&\n        renderLogo({\n          size,\n          logo,\n          logoSize,\n          logoBackgroundColor,\n          logoMargin,\n          logoBorderRadius\n        })}\n    </Svg>\n  )\n}\n\nexport default QRCode\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}