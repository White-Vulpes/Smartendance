{"ast":null,"code":"import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import{State}from\"../../State\";import{EventType}from\"../../EventType\";import{findHandler}from\"../handlersRegistry\";var gestureHandlerEventSubscription=null;var gestureHandlerStateChangeEventSubscription=null;var dummyStateManager={begin:function begin(){console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');},activate:function activate(){console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');},end:function end(){console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');},fail:function fail(){console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');}};var lastUpdateEvent=[];function isStateChangeEvent(event){return event.oldState!=null;}function isTouchEvent(event){return event.eventType!=null;}export function onGestureHandlerEvent(event){var _handler$handlers7,_handler$handlers7$on,_handler$handlers8,_handler$handlers8$on,_handler$handlers9,_handler$handlers9$on,_handler$handlers10,_handler$handlers10$o;var handler=findHandler(event.handlerTag);if(handler){if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){var _handler$handlers$onB,_handler$handlers;(_handler$handlers$onB=(_handler$handlers=handler.handlers).onBegin)===null||_handler$handlers$onB===void 0?void 0:_handler$handlers$onB.call(_handler$handlers,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){var _handler$handlers$onS,_handler$handlers2;(_handler$handlers$onS=(_handler$handlers2=handler.handlers).onStart)===null||_handler$handlers$onS===void 0?void 0:_handler$handlers$onS.call(_handler$handlers2,event);lastUpdateEvent[handler.handlers.handlerTag]=event;}else if(event.oldState!==event.state&&event.state===State.END){var _handler$handlers$onF,_handler$handlers4;if(event.oldState===State.ACTIVE){var _handler$handlers$onE,_handler$handlers3;(_handler$handlers$onE=(_handler$handlers3=handler.handlers).onEnd)===null||_handler$handlers$onE===void 0?void 0:_handler$handlers$onE.call(_handler$handlers3,event,true);}(_handler$handlers$onF=(_handler$handlers4=handler.handlers).onFinalize)===null||_handler$handlers$onF===void 0?void 0:_handler$handlers$onF.call(_handler$handlers4,event,true);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.oldState!==event.state){var _handler$handlers$onF2,_handler$handlers6;if(event.oldState===State.ACTIVE){var _handler$handlers$onE2,_handler$handlers5;(_handler$handlers$onE2=(_handler$handlers5=handler.handlers).onEnd)===null||_handler$handlers$onE2===void 0?void 0:_handler$handlers$onE2.call(_handler$handlers5,event,false);}(_handler$handlers$onF2=(_handler$handlers6=handler.handlers).onFinalize)===null||_handler$handlers$onF2===void 0?void 0:_handler$handlers$onF2.call(_handler$handlers6,event,false);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}}else if(isTouchEvent(event)){switch(event.eventType){case EventType.TOUCHES_DOWN:(_handler$handlers7=handler.handlers)===null||_handler$handlers7===void 0?void 0:(_handler$handlers7$on=_handler$handlers7.onTouchesDown)===null||_handler$handlers7$on===void 0?void 0:_handler$handlers7$on.call(_handler$handlers7,event,dummyStateManager);break;case EventType.TOUCHES_MOVE:(_handler$handlers8=handler.handlers)===null||_handler$handlers8===void 0?void 0:(_handler$handlers8$on=_handler$handlers8.onTouchesMove)===null||_handler$handlers8$on===void 0?void 0:_handler$handlers8$on.call(_handler$handlers8,event,dummyStateManager);break;case EventType.TOUCHES_UP:(_handler$handlers9=handler.handlers)===null||_handler$handlers9===void 0?void 0:(_handler$handlers9$on=_handler$handlers9.onTouchesUp)===null||_handler$handlers9$on===void 0?void 0:_handler$handlers9$on.call(_handler$handlers9,event,dummyStateManager);break;case EventType.TOUCHES_CANCELLED:(_handler$handlers10=handler.handlers)===null||_handler$handlers10===void 0?void 0:(_handler$handlers10$o=_handler$handlers10.onTouchesCancelled)===null||_handler$handlers10$o===void 0?void 0:_handler$handlers10$o.call(_handler$handlers10,event,dummyStateManager);break;}}else{var _handler$handlers$onU,_handler$handlers11;(_handler$handlers$onU=(_handler$handlers11=handler.handlers).onUpdate)===null||_handler$handlers$onU===void 0?void 0:_handler$handlers$onU.call(_handler$handlers11,event);if(handler.handlers.onChange&&handler.handlers.changeEventCalculator){var _handler$handlers$onC,_handler$handlers12,_handler$handlers$cha,_handler$handlers13;(_handler$handlers$onC=(_handler$handlers12=handler.handlers).onChange)===null||_handler$handlers$onC===void 0?void 0:_handler$handlers$onC.call(_handler$handlers12,(_handler$handlers$cha=(_handler$handlers13=handler.handlers).changeEventCalculator)===null||_handler$handlers$cha===void 0?void 0:_handler$handlers$cha.call(_handler$handlers13,event,lastUpdateEvent[handler.handlers.handlerTag]));lastUpdateEvent[handler.handlers.handlerTag]=event;}}}}export function startListening(){stopListening();gestureHandlerEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerEvent',onGestureHandlerEvent);gestureHandlerStateChangeEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerStateChange',onGestureHandlerEvent);}export function stopListening(){if(gestureHandlerEventSubscription){DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);gestureHandlerEventSubscription=null;}if(gestureHandlerStateChangeEventSubscription){DeviceEventEmitter.removeSubscription(gestureHandlerStateChangeEventSubscription);gestureHandlerStateChangeEventSubscription=null;}}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","activate","end","fail","lastUpdateEvent","event","handler","findHandler","isStateChangeEvent","State","isTouchEvent","EventType","stopListening","DeviceEventEmitter"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  activate: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  end: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  fail: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(\n      gestureHandlerStateChangeEventSubscription\n    );\n\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}