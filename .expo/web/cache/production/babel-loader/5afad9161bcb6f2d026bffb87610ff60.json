{"ast":null,"code":"import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import LinkingContext from\"./LinkingContext\";import useLinkTo from\"./useLinkTo\";var getStateFromParams=function getStateFromParams(params){if(params!==null&&params!==void 0&&params.state){return params.state;}if(params!==null&&params!==void 0&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export default function useLinkProps(_ref){var _options$getPathFromS;var to=_ref.to,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var _React$useContext=React.useContext(LinkingContext),options=_React$useContext.options;var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};var getPathFromStateHelper=(_options$getPathFromS=options===null||options===void 0?void 0:options.getPathFromState)!==null&&_options$getPathFromS!==void 0?_options$getPathFromS:getPathFromState;var href=typeof to==='string'?to:getPathFromStateHelper({routes:[{name:to.screen,params:to.params,state:getStateFromParams(to.params)}]},options===null||options===void 0?void 0:options.config);return{href:href,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["getStateFromParams","params","routes","name","state","undefined","action","root","React","navigation","options","linkTo","useLinkTo","onPress","e","shouldHandle","Platform","getPathFromStateHelper","href","to","accessibilityRole"],"mappings":"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","sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}