{"ast":null,"code":"import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import ServerContext from\"./ServerContext\";export default React.forwardRef(function ServerContainer(_ref,ref){var children=_ref.children,location=_ref.location;React.useEffect(function(){console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);var current={};if(ref){var value={getCurrentOptions:function getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return React.createElement(ServerContext.Provider,{value:{location:location}},React.createElement(CurrentRenderContext.Provider,{value:current},children));});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["location","React","console","current","value","getCurrentOptions","ref"],"mappings":"AAAA,OAAA,oBAAA,KAAA,wBAAA,CACA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,MAAA,cAAA,uBAcA,cAAe,MAAK,CAAL,UAAA,CAAiB,QAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAG9B,CAFA,GAAA,SAAA,CAEA,IAFA,CAAA,QAAA,CAAYA,QAAZ,CAEA,IAFA,CAAYA,QAAZ,CAGAC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBC,OAAO,CAAPA,KAAAA,CAAAA,sFAAAA,EADFD,CAAAA,CAAAA,EAAAA,EAMA,GAAME,QAA6B,CAAnC,EAAA,CAEA,GAAA,GAAA,CAAS,CACP,GAAMC,MAAK,CAAG,CACZC,iBADY,6BACQ,CAClB,MAAOF,QAAO,CAAd,OAAA,CACD,CAHW,CAAd,CAUA,GAAI,MAAA,IAAA,GAAJ,UAAA,CAA+B,CAC7BG,GAAG,CAAHA,KAAG,CAAHA,CADF,CAAA,IAEO,CAELA,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,CACD,CACF,CAED,MACE,MAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,CAAA,CAAwB,KAAK,CAAE,CAAEN,QAAAA,CAAAA,QAAF,CAA/B,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,CAAA,CAA+B,KAAK,CAAEG,OAAtC,CAAA,CAFJ,QAEI,CADF,CADF,CA/BF,CAAe,CAAf","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}