{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import createHandler from\"./createHandler\";import{baseGestureHandlerProps}from\"./gestureHandlerCommon\";export var panGestureHandlerProps=['activeOffsetY','activeOffsetX','failOffsetY','failOffsetX','minDist','minVelocity','minVelocityX','minVelocityY','minPointers','maxPointers','avgTouches','enableTrackpadTwoFingerGesture'];export var panGestureHandlerCustomNativeProps=['activeOffsetYStart','activeOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','failOffsetYStart','failOffsetYEnd','failOffsetXStart','failOffsetXEnd'];export var PanGestureHandler=createHandler({name:'PanGestureHandler',allowedProps:[].concat(_toConsumableArray(baseGestureHandlerProps),panGestureHandlerProps),config:{},transformProps:managePanProps,customNativeProps:panGestureHandlerCustomNativeProps});function validatePanGestureHandlerProps(props){if(Array.isArray(props.activeOffsetX)&&(props.activeOffsetX[0]>0||props.activeOffsetX[1]<0)){throw new Error(\"First element of activeOffsetX should be negative, a the second one should be positive\");}if(Array.isArray(props.activeOffsetY)&&(props.activeOffsetY[0]>0||props.activeOffsetY[1]<0)){throw new Error(\"First element of activeOffsetY should be negative, a the second one should be positive\");}if(Array.isArray(props.failOffsetX)&&(props.failOffsetX[0]>0||props.failOffsetX[1]<0)){throw new Error(\"First element of failOffsetX should be negative, a the second one should be positive\");}if(Array.isArray(props.failOffsetY)&&(props.failOffsetY[0]>0||props.failOffsetY[1]<0)){throw new Error(\"First element of failOffsetY should be negative, a the second one should be positive\");}if(props.minDist&&(props.failOffsetX||props.failOffsetY)){throw new Error(\"It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead\");}if(props.minDist&&(props.activeOffsetX||props.activeOffsetY)){throw new Error(\"It is not supported to use minDist with activeOffsetX or activeOffsetY\");}}function transformPanGestureHandlerProps(props){var res=_objectSpread({},props);if(props.activeOffsetX!==undefined){delete res.activeOffsetX;if(Array.isArray(props.activeOffsetX)){res.activeOffsetXStart=props.activeOffsetX[0];res.activeOffsetXEnd=props.activeOffsetX[1];}else if(props.activeOffsetX<0){res.activeOffsetXStart=props.activeOffsetX;}else{res.activeOffsetXEnd=props.activeOffsetX;}}if(props.activeOffsetY!==undefined){delete res.activeOffsetY;if(Array.isArray(props.activeOffsetY)){res.activeOffsetYStart=props.activeOffsetY[0];res.activeOffsetYEnd=props.activeOffsetY[1];}else if(props.activeOffsetY<0){res.activeOffsetYStart=props.activeOffsetY;}else{res.activeOffsetYEnd=props.activeOffsetY;}}if(props.failOffsetX!==undefined){delete res.failOffsetX;if(Array.isArray(props.failOffsetX)){res.failOffsetXStart=props.failOffsetX[0];res.failOffsetXEnd=props.failOffsetX[1];}else if(props.failOffsetX<0){res.failOffsetXStart=props.failOffsetX;}else{res.failOffsetXEnd=props.failOffsetX;}}if(props.failOffsetY!==undefined){delete res.failOffsetY;if(Array.isArray(props.failOffsetY)){res.failOffsetYStart=props.failOffsetY[0];res.failOffsetYEnd=props.failOffsetY[1];}else if(props.failOffsetY<0){res.failOffsetYStart=props.failOffsetY;}else{res.failOffsetYEnd=props.failOffsetY;}}return res;}export function managePanProps(props){if(__DEV__){validatePanGestureHandlerProps(props);}return transformPanGestureHandlerProps(props);}","map":{"version":3,"sources":["PanGestureHandler.ts"],"names":["panGestureHandlerProps","panGestureHandlerCustomNativeProps","PanGestureHandler","createHandler","name","allowedProps","config","transformProps","customNativeProps","Array","props","res","validatePanGestureHandlerProps","transformPanGestureHandlerProps"],"mappings":"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","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const panGestureHandlerProps = [\n  'activeOffsetY',\n  'activeOffsetX',\n  'failOffsetY',\n  'failOffsetX',\n  'minDist',\n  'minVelocity',\n  'minVelocityX',\n  'minVelocityY',\n  'minPointers',\n  'maxPointers',\n  'avgTouches',\n  'enableTrackpadTwoFingerGesture',\n] as const;\n\nexport const panGestureHandlerCustomNativeProps = [\n  'activeOffsetYStart',\n  'activeOffsetYEnd',\n  'activeOffsetXStart',\n  'activeOffsetXEnd',\n  'failOffsetYStart',\n  'failOffsetYEnd',\n  'failOffsetXStart',\n  'failOffsetXEnd',\n] as const;\n\nexport type PanGestureHandlerEventPayload = {\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  x: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  y: number;\n\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `x` in cases when the original view can be transformed as an effect of\n   * the gesture.\n   */\n  absoluteX: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `y` in cases when the original view can be transformed as an\n   * effect of the gesture.\n   */\n  absoluteY: number;\n\n  /**\n   * Translation of the pan gesture along X axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationX: number;\n\n  /**\n   * Translation of the pan gesture along Y axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationY: number;\n\n  /**\n   * Velocity of the pan gesture along the X axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityX: number;\n\n  /**\n   * Velocity of the pan gesture along the Y axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityY: number;\n};\n\ninterface CommonPanProperties {\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the\n   * handler activates. Expressed in points.\n   */\n  minDist?: number;\n\n  /**\n   * Android only.\n   */\n  avgTouches?: boolean;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * enableTrackpadTwoFingerGesture swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * A number of fingers that is required to be placed before handler can\n   * activate. Should be a higher or equal to 0 integer.\n   */\n  minPointers?: number;\n\n  /**\n   * When the given number of fingers is placed on the screen and handler hasn't\n   * yet activated it will fail recognizing the gesture. Should be a higher or\n   * equal to 0 integer.\n   */\n  maxPointers?: number;\n\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n}\n\nexport interface PanGestureConfig extends CommonPanProperties {\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  failOffsetYStart?: number;\n  failOffsetYEnd?: number;\n  failOffsetXStart?: number;\n  failOffsetXEnd?: number;\n}\n\nexport interface PanGestureHandlerProps\n  extends BaseGestureHandlerProps<PanGestureHandlerEventPayload>,\n    CommonPanProperties {\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetY?: number | number[];\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetX?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetY?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetX?: number | number[];\n}\n\nexport type PanGestureHandler = typeof PanGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const PanGestureHandler = createHandler<\n  PanGestureHandlerProps,\n  PanGestureHandlerEventPayload\n>({\n  name: 'PanGestureHandler',\n  allowedProps: [\n    ...baseGestureHandlerProps,\n    ...panGestureHandlerProps,\n  ] as const,\n  config: {},\n  transformProps: managePanProps,\n  customNativeProps: panGestureHandlerCustomNativeProps,\n});\n\nfunction validatePanGestureHandlerProps(props: PanGestureHandlerProps) {\n  if (\n    Array.isArray(props.activeOffsetX) &&\n    (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.activeOffsetY) &&\n    (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetX) &&\n    (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetY) &&\n    (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`\n    );\n  }\n\n  if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with activeOffsetX or activeOffsetY`\n    );\n  }\n}\n\nfunction transformPanGestureHandlerProps(props: PanGestureHandlerProps) {\n  type InternalPanGHKeys =\n    | 'activeOffsetXStart'\n    | 'activeOffsetXEnd'\n    | 'failOffsetXStart'\n    | 'failOffsetXEnd'\n    | 'activeOffsetYStart'\n    | 'activeOffsetYEnd'\n    | 'failOffsetYStart'\n    | 'failOffsetYEnd';\n  type PanGestureHandlerInternalProps = PanGestureHandlerProps &\n    Partial<Record<InternalPanGHKeys, number>>;\n\n  const res: PanGestureHandlerInternalProps = { ...props };\n\n  if (props.activeOffsetX !== undefined) {\n    delete res.activeOffsetX;\n    if (Array.isArray(props.activeOffsetX)) {\n      res.activeOffsetXStart = props.activeOffsetX[0];\n      res.activeOffsetXEnd = props.activeOffsetX[1];\n    } else if (props.activeOffsetX < 0) {\n      res.activeOffsetXStart = props.activeOffsetX;\n    } else {\n      res.activeOffsetXEnd = props.activeOffsetX;\n    }\n  }\n\n  if (props.activeOffsetY !== undefined) {\n    delete res.activeOffsetY;\n    if (Array.isArray(props.activeOffsetY)) {\n      res.activeOffsetYStart = props.activeOffsetY[0];\n      res.activeOffsetYEnd = props.activeOffsetY[1];\n    } else if (props.activeOffsetY < 0) {\n      res.activeOffsetYStart = props.activeOffsetY;\n    } else {\n      res.activeOffsetYEnd = props.activeOffsetY;\n    }\n  }\n\n  if (props.failOffsetX !== undefined) {\n    delete res.failOffsetX;\n    if (Array.isArray(props.failOffsetX)) {\n      res.failOffsetXStart = props.failOffsetX[0];\n      res.failOffsetXEnd = props.failOffsetX[1];\n    } else if (props.failOffsetX < 0) {\n      res.failOffsetXStart = props.failOffsetX;\n    } else {\n      res.failOffsetXEnd = props.failOffsetX;\n    }\n  }\n\n  if (props.failOffsetY !== undefined) {\n    delete res.failOffsetY;\n    if (Array.isArray(props.failOffsetY)) {\n      res.failOffsetYStart = props.failOffsetY[0];\n      res.failOffsetYEnd = props.failOffsetY[1];\n    } else if (props.failOffsetY < 0) {\n      res.failOffsetYStart = props.failOffsetY;\n    } else {\n      res.failOffsetYEnd = props.failOffsetY;\n    }\n  }\n\n  return res;\n}\n\nexport function managePanProps(props: PanGestureHandlerProps) {\n  if (__DEV__) {\n    validatePanGestureHandlerProps(props);\n  }\n  return transformPanGestureHandlerProps(props);\n}\n"]},"metadata":{},"sourceType":"module"}