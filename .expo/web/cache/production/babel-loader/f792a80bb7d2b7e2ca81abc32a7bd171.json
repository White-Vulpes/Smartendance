{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from\"./findFocusedRoute\";import validatePathConfig from\"./validatePathConfig\";export default function getStateFromPath(path,options){var _ref;if(options){validatePathConfig(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,_toConsumableArray(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return _extends(acc,_defineProperty({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return _objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(config){if(!config.regex){return\"continue\";}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return _extends(acc,_defineProperty({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return\"break\";}};for(var _iterator=_createForOfIteratorHelperLoose(configs),_step;!(_step=_iterator()).done;){var config=_step.value;var _config$pattern;var _ret=_loop(config);if(_ret===\"continue\")continue;if(_ret===\"break\")break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern2;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern2=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern2,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,_toConsumableArray(parentScreens),(_pattern=_pattern2)!==null&&_pattern!==void 0?_pattern:parentPattern);configs.push.apply(configs,_toConsumableArray(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':escape(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:_toConsumableArray(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var _iterator2=_createForOfIteratorHelperLoose(flatConfig),_step2;!(_step2=_iterator2()).done;){var config=_step2.value;if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var _iterator3=_createForOfIteratorHelperLoose(initialRoutes),_step3;!(_step3=_iterator3()).done;){var config=_step3.value;if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(parseConfig[name]&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["validatePathConfig","initialRoutes","options","initialRouteName","parentScreens","screens","remaining","routes","segment","name","decodeURIComponent","createNestedStateObject","configs","Object","key","createNormalizedConfigs","a","b","aParts","bParts","i","Math","aWildCard","bWildCard","acc","config","intersects","pattern","match","c","remainingPath","matchAgainstConfigs","regex","undefined","current","result","joinPaths","paths","p","matchedParams","params","value","routeNames","initials","parentPattern","routeConfig","createConfigItem","nestedConfig","it","escape","screen","path","parse","findParseConfigForRoute","routeName","findInitialRoute","sameParents","createStateObject","index","initialRoute","state","route","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","flatConfig","query","queryString","parseConfig"],"mappings":"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","sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}