{"ast":null,"code":"import{getActionFromState,getStateFromPath,NavigationContainerRefContext}from'@react-navigation/core';import*as React from'react';import LinkingContext from\"./LinkingContext\";export default function useLinkTo(){var navigation=React.useContext(NavigationContainerRefContext);var linking=React.useContext(LinkingContext);var linkTo=React.useCallback(function(to){if(navigation===undefined){throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}if(typeof to!=='string'){navigation.navigate(to.screen,to.params);return;}if(!to.startsWith('/')){throw new Error(\"The path must start with '/' (\"+to+\").\");}var options=linking.options;var state=options!==null&&options!==void 0&&options.getStateFromPath?options.getStateFromPath(to,options.config):getStateFromPath(to,options===null||options===void 0?void 0:options.config);if(state){var action=getActionFromState(state,options===null||options===void 0?void 0:options.config);if(action!==undefined){navigation.dispatch(action);}else{navigation.reset(state);}}else{throw new Error('Failed to parse the path to a navigation state.');}},[linking,navigation]);return linkTo;}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","linking","linkTo","to","options","state","getStateFromPath","action","getActionFromState"],"mappings":"AAAA,OAAA,kBAAA,CAAA,gBAAA,CAAA,6BAAA,KAAA,wBAAA,CAKA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,MAAA,eAAA,wBAiBA,cAAe,SAAA,UAAA,EAEX,CACF,GAAMA,WAAU,CAAGC,KAAK,CAALA,UAAAA,CAAnB,6BAAmBA,CAAnB,CACA,GAAMC,QAAO,CAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB,CAEA,GAAME,OAAM,CAAG,KAAK,CAAL,WAAA,CACZC,SAAAA,EAAD,CAAuB,CACrB,GAAIJ,UAAU,GAAd,SAAA,CAA8B,CAC5B,KAAM,IAAA,MAAA,CAAN,kFAAM,CAAN,CAGD,CAED,GAAI,MAAA,GAAA,GAAJ,QAAA,CAA4B,CAE1BA,UAAU,CAAVA,QAAAA,CAAoBI,EAAE,CAAtBJ,MAAAA,CAA+BI,EAAE,CAAjCJ,MAAAA,EACA,OACD,CAED,GAAI,CAACI,EAAE,CAAFA,UAAAA,CAAL,GAAKA,CAAL,CAAyB,CACvB,KAAM,IAAA,MAAA,kCAAN,EAAM,MAAN,CACD,CAED,GAAQC,QAAR,CAAA,OAAA,CAAQA,OAAR,CAEA,GAAMC,MAAK,CAAGD,OAAO,GAAPA,IAAAA,EAAAA,OAAO,GAAA,IAAPA,EAAAA,EAAAA,OAAO,CAAPA,gBAAAA,CACVA,OAAO,CAAPA,gBAAAA,CAAAA,EAAAA,CAA6BA,OAAO,CAD1BA,MACVA,CADUA,CAEVE,gBAAgB,CAAA,EAAA,CAAKF,OAAL,GAAA,IAAKA,EAAAA,OAAL,GAAA,IAAA,EAAKA,CAAL,IAAA,EAAKA,CAAAA,OAAO,CAFhC,MAEoB,CAFpB,CAIA,GAAA,KAAA,CAAW,CACT,GAAMG,OAAM,CAAGC,kBAAkB,CAAA,KAAA,CAAQJ,OAAR,GAAA,IAAQA,EAAAA,OAAR,GAAA,IAAA,EAAQA,CAAR,IAAA,EAAQA,CAAAA,OAAO,CAAhD,MAAiC,CAAjC,CAEA,GAAIG,MAAM,GAAV,SAAA,CAA0B,CACxBR,UAAU,CAAVA,QAAAA,CAAAA,MAAAA,EADF,CAAA,IAEO,CACLA,UAAU,CAAVA,KAAAA,CAAAA,KAAAA,EACD,CAPH,CAAA,IAQO,CACL,KAAM,IAAA,MAAA,CAAN,iDAAM,CAAN,CACD,CAlCU,CAAA,CAoCb,CAAA,OAAA,CApCF,UAoCE,CApCa,CAAf,CAuCA,MAAA,OAAA,CACD","sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}