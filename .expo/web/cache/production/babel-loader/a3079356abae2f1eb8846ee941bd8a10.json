{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"state\"];import*as React from'react';export var CHILD_STATE=Symbol('CHILD_STATE');export default function useRouteCache(routes){var cache=React.useMemo(function(){return{current:new Map()};},[]);if(process.env.NODE_ENV==='production'){return routes;}cache.current=routes.reduce(function(acc,route){var previous=cache.current.get(route);if(previous){acc.set(route,previous);}else{var state=route.state,proxy=_objectWithoutProperties(route,_excluded);Object.defineProperty(proxy,CHILD_STATE,{enumerable:false,value:state});acc.set(route,proxy);}return acc;},new Map());return Array.from(cache.current.values());}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["CHILD_STATE","Symbol","cache","current","process","previous","acc","proxy","Object","enumerable","value","state","Array"],"mappings":"6GAKA,MAAO,GAAP,MAAA,KAAA,OAAA,CAWA,MAAO,IAAMA,YAAW,CAAGC,MAAM,CAA1B,aAA0B,CAA1B,CAMP,cAAe,SAAA,cAAA,CAAA,MAAA,CAEb,CAEA,GAAMC,MAAK,CAAG,KAAK,CAAL,OAAA,CAAc,iBAAO,CAAEC,OAAO,CAAE,GAAA,IAAA,EAAX,CAAP,EAAd,CAAd,EAAc,CAAd,CAEA,GAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CAEzC,MAAA,OAAA,CACD,CAEDF,KAAK,CAALA,OAAAA,CAAgB,MAAM,CAAN,MAAA,CAAc,SAAA,GAAA,CAAA,KAAA,CAAgB,CAC5C,GAAMG,SAAQ,CAAGH,KAAK,CAALA,OAAAA,CAAAA,GAAAA,CAAjB,KAAiBA,CAAjB,CAEA,GAAA,QAAA,CAAc,CAEZI,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAFF,CAAA,IAGO,CACL,GAAM,MAAN,CAAA,KAAA,CAAM,KAAN,CAAkBC,KAAlB,0BAAA,KAAA,YAEAC,MAAM,CAANA,cAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CAA0C,CACxCC,UAAU,CAD8B,KAAA,CAExCC,KAAK,CAAEC,KAFiC,CAA1CH,EAKAF,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,EACD,CAED,MAAA,IAAA,CAjBc,CAAA,CAkBb,GAlBHJ,IAkBG,EAlBa,CAAhBA,CAoBA,MAAOU,MAAK,CAALA,IAAAA,CAAWV,KAAK,CAALA,OAAAA,CAAlB,MAAkBA,EAAXU,CAAP,CACD","sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"module"}