{"ast":null,"code":"import _construct from\"@babel/runtime/helpers/construct\";import{FlingGesture}from\"./flingGesture\";import{ForceTouchGesture}from\"./forceTouchGesture\";import{ComposedGesture,ExclusiveGesture,SimultaneousGesture}from\"./gestureComposition\";import{LongPressGesture}from\"./longPressGesture\";import{PanGesture}from\"./panGesture\";import{PinchGesture}from\"./pinchGesture\";import{RotationGesture}from\"./rotationGesture\";import{TapGesture}from\"./tapGesture\";import{NativeGesture}from\"./nativeGesture\";import{ManualGesture}from\"./manualGesture\";export var GestureObjects={Tap:function Tap(){return new TapGesture();},Pan:function Pan(){return new PanGesture();},Pinch:function Pinch(){return new PinchGesture();},Rotation:function Rotation(){return new RotationGesture();},Fling:function Fling(){return new FlingGesture();},LongPress:function LongPress(){return new LongPressGesture();},ForceTouch:function ForceTouch(){return new ForceTouchGesture();},Native:function Native(){return new NativeGesture();},Manual:function Manual(){return new ManualGesture();},Race:function Race(){for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}return _construct(ComposedGesture,gestures);},Simultaneous:function Simultaneous(){for(var _len2=arguments.length,gestures=new Array(_len2),_key2=0;_key2<_len2;_key2++){gestures[_key2]=arguments[_key2];}return _construct(SimultaneousGesture,gestures);},Exclusive:function Exclusive(){for(var _len3=arguments.length,gestures=new Array(_len3),_key3=0;_key3<_len3;_key3++){gestures[_key3]=arguments[_key3];}return _construct(ExclusiveGesture,gestures);}};","map":{"version":3,"sources":["gestureObjects.ts"],"names":["GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Race","Simultaneous","Exclusive"],"mappings":"yDAAA,OAAA,YAAA,sBACA,OAAA,iBAAA,2BAEA,OAAA,eAAA,CAAA,gBAAA,CAAA,mBAAA,4BAKA,OAAA,gBAAA,0BACA,OAAA,UAAA,oBACA,OAAA,YAAA,sBACA,OAAA,eAAA,yBACA,OAAA,UAAA,oBACA,OAAA,aAAA,uBACA,OAAA,aAAA,uBAEA,MAAO,IAAMA,eAAc,CAAG,CAC5BC,GAAG,CAAE,cAAM,CACT,MAAO,IAAP,WAAO,EAAP,CAF0B,CAAA,CAK5BC,GAAG,CAAE,cAAM,CACT,MAAO,IAAP,WAAO,EAAP,CAN0B,CAAA,CAS5BC,KAAK,CAAE,gBAAM,CACX,MAAO,IAAP,aAAO,EAAP,CAV0B,CAAA,CAa5BC,QAAQ,CAAE,mBAAM,CACd,MAAO,IAAP,gBAAO,EAAP,CAd0B,CAAA,CAiB5BC,KAAK,CAAE,gBAAM,CACX,MAAO,IAAP,aAAO,EAAP,CAlB0B,CAAA,CAqB5BC,SAAS,CAAE,oBAAM,CACf,MAAO,IAAP,iBAAO,EAAP,CAtB0B,CAAA,CAyB5BC,UAAU,CAAE,qBAAM,CAChB,MAAO,IAAP,kBAAO,EAAP,CA1B0B,CAAA,CA6B5BC,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAP,cAAO,EAAP,CA9B0B,CAAA,CAiC5BC,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAP,cAAO,EAAP,CAlC0B,CAAA,CAyC5BC,IAAI,CAAE,eAA4B,+BAA5B,QAA4B,0CAA5B,QAA4B,wBAChC,kBAAO,eAAP,CAAA,QAAA,EA1C0B,CAAA,CAgD5BC,YAhD4B,wBAgDS,gCAAzB,QAAyB,+CAAzB,QAAyB,0BACnC,kBAAO,mBAAP,CAAA,QAAA,EAjD0B,CAAA,CA2D5BC,SA3D4B,qBA2DM,gCAAzB,QAAyB,+CAAzB,QAAyB,0BAChC,kBAAO,gBAAP,CAAA,QAAA,EACD,CA7D2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}