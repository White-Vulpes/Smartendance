{"ast":null,"code":"export default function checkDuplicateRouteNames(state){var duplicates=[];var getRouteNames=function getRouteNames(location,state){state.routes.forEach(function(route){var _route$state,_route$state$routeNam;var currentLocation=location?location+\" > \"+route.name:route.name;(_route$state=route.state)===null||_route$state===void 0?void 0:(_route$state$routeNam=_route$state.routeNames)===null||_route$state$routeNam===void 0?void 0:_route$state$routeNam.forEach(function(routeName){if(routeName===route.name){duplicates.push([currentLocation,currentLocation+\" > \"+route.name]);}});if(route.state){getRouteNames(currentLocation,route.state);}});};getRouteNames('',state);return duplicates;}","map":{"version":3,"sources":["checkDuplicateRouteNames.tsx"],"names":["duplicates","getRouteNames","state","route","currentLocation","location","routeName"],"mappings":"AAEA,cAAe,SAAA,yBAAA,CAAA,KAAA,CAA0D,CACvE,GAAMA,WAAsB,CAA5B,EAAA,CAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,CAAA,QAAA,CAAA,KAAA,CAGjB,CACHC,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAsBC,SAAAA,KAAD,CAAmC,CAAA,GAAA,aAAA,CAAA,qBAAA,CACtD,GAAMC,gBAAe,CAAGC,QAAQ,CACzBA,QADyB,OACXF,KAAK,CADM,IAAA,CAE5BA,KAAK,CAFT,IAAA,CAIA,CAAA,YAAA,CAAA,KAAK,CAAL,KAAA,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,qBAAA,CAAA,YAAA,CAAA,UAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,OAAA,CAAkCG,SAAAA,SAAD,CAAe,CAC9C,GAAIA,SAAS,GAAKH,KAAK,CAAvB,IAAA,CAA8B,CAC5BH,UAAU,CAAVA,IAAAA,CAAgB,CAAA,eAAA,CAEXI,eAFW,OAEUD,KAAK,CAF/BH,IAAgB,CAAhBA,EAID,CANH,CAAA,CAAA,CASA,GAAIG,KAAK,CAAT,KAAA,CAAiB,CACfF,aAAa,CAAA,eAAA,CAAkBE,KAAK,CAApCF,KAAa,CAAbA,CACD,CAhBHC,CAAAA,EAJF,CAAA,CAwBAD,aAAa,CAAA,EAAA,CAAbA,KAAa,CAAbA,CAEA,MAAA,WAAA,CACD","sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"]},"metadata":{},"sourceType":"module"}