{"ast":null,"code":"var _global$contexts;import*as React from'react';var contexts='__react_navigation__elements_contexts';global[contexts]=(_global$contexts=global[contexts])!==null&&_global$contexts!==void 0?_global$contexts:new Map();export default function getNamedContext(name,initialValue){var context=global[contexts].get(name);if(context){return context;}context=React.createContext(initialValue);context.displayName=name;global[contexts].set(name,context);return context;}","map":{"version":3,"sources":["getNamedContext.tsx"],"names":["contexts","global","context","React"],"mappings":"qBAAA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,GAAMA,SAAQ,CAAd,uCAAA,CAOAC,MAAM,CAANA,QAAM,CAANA,CAAAA,CAAAA,gBAAAA,CAAmBA,MAAM,CAAzBA,QAAyB,CAAzBA,IAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,IAAAA,EAAAA,CAAAA,gBAAAA,CAAuC,GAAvCA,IAAuC,EAAvCA,CAEA,cAAe,SAAA,gBAAA,CAAA,IAAA,CAAA,YAAA,CAGK,CAClB,GAAIC,QAAO,CAAGD,MAAM,CAANA,QAAM,CAANA,CAAAA,GAAAA,CAAd,IAAcA,CAAd,CAEA,GAAA,OAAA,CAAa,CACX,MAAA,QAAA,CACD,CAEDC,OAAO,CAAGC,KAAK,CAALA,aAAAA,CAAVD,YAAUC,CAAVD,CACAA,OAAO,CAAPA,WAAAA,CAAAA,IAAAA,CAEAD,MAAM,CAANA,QAAM,CAANA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAEA,MAAA,QAAA,CACD","sourcesContent":["import * as React from 'react';\n\nconst contexts = '__react_navigation__elements_contexts';\n\ndeclare global {\n  var __react_navigation__elements_contexts: Map<string, React.Context<any>>;\n}\n\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobal[contexts] = global[contexts] ?? new Map<string, React.Context<any>>();\n\nexport default function getNamedContext<T>(\n  name: string,\n  initialValue: T\n): React.Context<T> {\n  let context = global[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext<T>(initialValue);\n  context.displayName = name;\n\n  global[contexts].set(name, context);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}