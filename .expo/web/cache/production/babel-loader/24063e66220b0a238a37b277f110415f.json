{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Component}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import{State}from\"../../State\";import{BaseButton}from\"../GestureButtons\";export var TOUCHABLE_STATE={UNDETERMINED:0,BEGAN:1,MOVED_OUTSIDE:2};var GenericTouchable=function(_Component){_inherits(GenericTouchable,_Component);var _super=_createSuper(GenericTouchable);function GenericTouchable(){var _this;_classCallCheck(this,GenericTouchable);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"pressInTimeout\",void 0);_defineProperty(_assertThisInitialized(_this),\"pressOutTimeout\",void 0);_defineProperty(_assertThisInitialized(_this),\"longPressTimeout\",void 0);_defineProperty(_assertThisInitialized(_this),\"longPressDetected\",false);_defineProperty(_assertThisInitialized(_this),\"pointerInside\",true);_defineProperty(_assertThisInitialized(_this),\"STATE\",TOUCHABLE_STATE.UNDETERMINED);_defineProperty(_assertThisInitialized(_this),\"onGestureEvent\",function(_ref){var pointerInside=_ref.nativeEvent.pointerInside;if(_this.pointerInside!==pointerInside){if(pointerInside){_this.onMoveIn();}else{_this.onMoveOut();}}_this.pointerInside=pointerInside;});_defineProperty(_assertThisInitialized(_this),\"onHandlerStateChange\",function(_ref2){var nativeEvent=_ref2.nativeEvent;var state=nativeEvent.state;if(state===State.CANCELLED||state===State.FAILED){_this.moveToState(TOUCHABLE_STATE.UNDETERMINED);}else if(state===(Platform.OS!=='android'?State.ACTIVE:State.BEGAN)&&_this.STATE===TOUCHABLE_STATE.UNDETERMINED){_this.handlePressIn();}else if(state===State.END){var shouldCallOnPress=!_this.longPressDetected&&_this.STATE!==TOUCHABLE_STATE.MOVED_OUTSIDE&&_this.pressOutTimeout===null;_this.handleGoToUndetermined();if(shouldCallOnPress){var _this$props$onPress,_this$props;(_this$props$onPress=(_this$props=_this.props).onPress)===null||_this$props$onPress===void 0?void 0:_this$props$onPress.call(_this$props);}}});_defineProperty(_assertThisInitialized(_this),\"onLongPressDetected\",function(){var _this$props$onLongPre,_this$props2;_this.longPressDetected=true;(_this$props$onLongPre=(_this$props2=_this.props).onLongPress)===null||_this$props$onLongPre===void 0?void 0:_this$props$onLongPre.call(_this$props2);});return _this;}_createClass(GenericTouchable,[{key:\"handlePressIn\",value:function handlePressIn(){var _this2=this;if(this.props.delayPressIn){this.pressInTimeout=setTimeout(function(){_this2.moveToState(TOUCHABLE_STATE.BEGAN);_this2.pressInTimeout=null;},this.props.delayPressIn);}else{this.moveToState(TOUCHABLE_STATE.BEGAN);}if(this.props.onLongPress){var time=(this.props.delayPressIn||0)+(this.props.delayLongPress||0);this.longPressTimeout=setTimeout(this.onLongPressDetected,time);}}},{key:\"handleMoveOutside\",value:function handleMoveOutside(){var _this3=this;if(this.props.delayPressOut){this.pressOutTimeout=this.pressOutTimeout||setTimeout(function(){_this3.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);_this3.pressOutTimeout=null;},this.props.delayPressOut);}else{this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);}}},{key:\"handleGoToUndetermined\",value:function handleGoToUndetermined(){var _this4=this;clearTimeout(this.pressOutTimeout);if(this.props.delayPressOut){this.pressOutTimeout=setTimeout(function(){if(_this4.STATE===TOUCHABLE_STATE.UNDETERMINED){_this4.moveToState(TOUCHABLE_STATE.BEGAN);}_this4.moveToState(TOUCHABLE_STATE.UNDETERMINED);_this4.pressOutTimeout=null;},this.props.delayPressOut);}else{if(this.STATE===TOUCHABLE_STATE.UNDETERMINED){this.moveToState(TOUCHABLE_STATE.BEGAN);}this.moveToState(TOUCHABLE_STATE.UNDETERMINED);}}},{key:\"componentDidMount\",value:function componentDidMount(){this.reset();}},{key:\"reset\",value:function reset(){this.longPressDetected=false;this.pointerInside=true;clearTimeout(this.pressInTimeout);clearTimeout(this.pressOutTimeout);clearTimeout(this.longPressTimeout);this.pressOutTimeout=null;this.longPressTimeout=null;this.pressInTimeout=null;}},{key:\"moveToState\",value:function moveToState(newState){var _this$props$onStateCh,_this$props6;if(newState===this.STATE){return;}if(newState===TOUCHABLE_STATE.BEGAN){var _this$props$onPressIn,_this$props3;(_this$props$onPressIn=(_this$props3=this.props).onPressIn)===null||_this$props$onPressIn===void 0?void 0:_this$props$onPressIn.call(_this$props3);}else if(newState===TOUCHABLE_STATE.MOVED_OUTSIDE){var _this$props$onPressOu,_this$props4;(_this$props$onPressOu=(_this$props4=this.props).onPressOut)===null||_this$props$onPressOu===void 0?void 0:_this$props$onPressOu.call(_this$props4);}else if(newState===TOUCHABLE_STATE.UNDETERMINED){this.reset();if(this.STATE===TOUCHABLE_STATE.BEGAN){var _this$props$onPressOu2,_this$props5;(_this$props$onPressOu2=(_this$props5=this.props).onPressOut)===null||_this$props$onPressOu2===void 0?void 0:_this$props$onPressOu2.call(_this$props5);}}(_this$props$onStateCh=(_this$props6=this.props).onStateChange)===null||_this$props$onStateCh===void 0?void 0:_this$props$onStateCh.call(_this$props6,this.STATE,newState);this.STATE=newState;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.reset();}},{key:\"onMoveIn\",value:function onMoveIn(){if(this.STATE===TOUCHABLE_STATE.MOVED_OUTSIDE){this.moveToState(TOUCHABLE_STATE.BEGAN);}}},{key:\"onMoveOut\",value:function onMoveOut(){clearTimeout(this.longPressTimeout);this.longPressTimeout=null;if(this.STATE===TOUCHABLE_STATE.BEGAN){this.handleMoveOutside();}}},{key:\"render\",value:function render(){var coreProps={accessible:this.props.accessible!==false,accessibilityLabel:this.props.accessibilityLabel,accessibilityHint:this.props.accessibilityHint,accessibilityRole:this.props.accessibilityRole,accessibilityState:this.props.accessibilityState,nativeID:this.props.nativeID,onLayout:this.props.onLayout,hitSlop:this.props.hitSlop};return React.createElement(BaseButton,_extends({style:this.props.containerStyle,onHandlerStateChange:this.props.disabled?undefined:this.onHandlerStateChange,onGestureEvent:this.onGestureEvent,hitSlop:this.props.hitSlop,shouldActivateOnStart:this.props.shouldActivateOnStart,disallowInterruption:this.props.disallowInterruption,testID:this.props.testID},this.props.extraButtonProps),React.createElement(Animated.View,_extends({},coreProps,{style:this.props.style}),this.props.children));}}]);return GenericTouchable;}(Component);export{GenericTouchable as default};_defineProperty(GenericTouchable,\"defaultProps\",{delayLongPress:600,extraButtonProps:{rippleColor:'transparent',exclusive:true}});","map":{"version":3,"sources":["GenericTouchable.tsx"],"names":["TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","delayLongPress","extraButtonProps","rippleColor","exclusive","handlePressIn","setTimeout","time","handleMoveOutside","handleGoToUndetermined","clearTimeout","componentDidMount","reset","moveToState","newState","nativeEvent","pointerInside","state","State","Platform","shouldCallOnPress","componentWillUnmount","onMoveIn","onMoveOut","render","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","nativeID","onLayout","hitSlop","testID","style"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../../handlers/gestureHandlerCommon';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\n\nexport interface GenericTouchableProps extends TouchableWithoutFeedbackProps {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props. - TODO: this comment may be unuseful in this moment\n\n  // TODO: in RN these events get native event parameter, which prolly could be used in our implementation too\n  onPress?: () => void;\n  onPressIn?: () => void;\n  onPressOut?: () => void;\n  onLongPress?: () => void;\n\n  nativeID?: string;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n\n  containerStyle?: StyleProp<ViewStyle>;\n}\n\ninterface InternalProps {\n  extraButtonProps: TouchableNativeFeedbackExtraProps;\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true,\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}