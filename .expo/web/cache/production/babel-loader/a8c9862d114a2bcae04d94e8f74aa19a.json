{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{nanoid}from'nanoid/non-secure';import BaseRouter from\"./BaseRouter\";var TYPE_ROUTE='route';export var TabActions={jumpTo:function jumpTo(name,params){return{type:'JUMP_TO',payload:{name:name,params:params}};}};var getRouteHistory=function getRouteHistory(routes,index,backBehavior,initialRouteName){var history=[{type:TYPE_ROUTE,key:routes[index].key}];var initialRouteIndex;switch(backBehavior){case'order':for(var i=index;i>0;i--){history.unshift({type:TYPE_ROUTE,key:routes[i-1].key});}break;case'firstRoute':if(index!==0){history.unshift({type:TYPE_ROUTE,key:routes[0].key});}break;case'initialRoute':initialRouteIndex=routes.findIndex(function(route){return route.name===initialRouteName;});initialRouteIndex=initialRouteIndex===-1?0:initialRouteIndex;if(index!==initialRouteIndex){history.unshift({type:TYPE_ROUTE,key:routes[initialRouteIndex].key});}break;case'history':break;}return history;};var changeIndex=function changeIndex(state,index,backBehavior,initialRouteName){var history;if(backBehavior==='history'){var currentKey=state.routes[index].key;history=state.history.filter(function(it){return it.type==='route'?it.key!==currentKey:false;}).concat({type:TYPE_ROUTE,key:currentKey});}else{history=getRouteHistory(state.routes,index,backBehavior,initialRouteName);}return _objectSpread(_objectSpread({},state),{},{index:index,history:history});};export default function TabRouter(_ref){var initialRouteName=_ref.initialRouteName,_ref$backBehavior=_ref.backBehavior,backBehavior=_ref$backBehavior===void 0?'firstRoute':_ref$backBehavior;var router=_objectSpread(_objectSpread({},BaseRouter),{},{type:'tab',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList;var index=initialRouteName!==undefined&&routeNames.includes(initialRouteName)?routeNames.indexOf(initialRouteName):0;var routes=routeNames.map(function(name){return{name:name,key:name+\"-\"+nanoid(),params:routeParamList[name]};});var history=getRouteHistory(routes,index,backBehavior,initialRouteName);return{stale:false,type:'tab',key:\"tab-\"+nanoid(),index:index,routeNames:routeNames,history:history,routes:routes};},getRehydratedState:function getRehydratedState(partialState,_ref3){var _state$routes,_state$index,_state$history$filter,_state$history;var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList;var state=partialState;if(state.stale===false){return state;}var routes=routeNames.map(function(name){var route=state.routes.find(function(r){return r.name===name;});return _objectSpread(_objectSpread({},route),{},{name:name,key:route&&route.name===name&&route.key?route.key:name+\"-\"+nanoid(),params:routeParamList[name]!==undefined?_objectSpread(_objectSpread({},routeParamList[name]),route?route.params:undefined):route?route.params:undefined});});var index=Math.min(Math.max(routeNames.indexOf((_state$routes=state.routes[(_state$index=state===null||state===void 0?void 0:state.index)!==null&&_state$index!==void 0?_state$index:0])===null||_state$routes===void 0?void 0:_state$routes.name),0),routes.length-1);var history=(_state$history$filter=(_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.filter(function(it){return routes.find(function(r){return r.key===it.key;});}))!==null&&_state$history$filter!==void 0?_state$history$filter:[];return changeIndex({stale:false,type:'tab',key:\"tab-\"+nanoid(),index:index,routeNames:routeNames,history:history,routes:routes},index,backBehavior,initialRouteName);},getStateForRouteNamesChange:function getStateForRouteNamesChange(state,_ref4){var routeNames=_ref4.routeNames,routeParamList=_ref4.routeParamList,routeKeyChanges=_ref4.routeKeyChanges;var routes=routeNames.map(function(name){return state.routes.find(function(r){return r.name===name&&!routeKeyChanges.includes(r.name);})||{name:name,key:name+\"-\"+nanoid(),params:routeParamList[name]};});var index=Math.max(0,routeNames.indexOf(state.routes[state.index].name));var history=state.history.filter(function(it){return it.type!=='route'||routes.find(function(r){return r.key===it.key;});});if(!history.length){history=getRouteHistory(routes,index,backBehavior,initialRouteName);}return _objectSpread(_objectSpread({},state),{},{history:history,routeNames:routeNames,routes:routes,index:index});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var index=state.routes.findIndex(function(r){return r.key===key;});if(index===-1||index===state.index){return state;}return changeIndex(state,index,backBehavior,initialRouteName);},getStateForAction:function getStateForAction(state,action,_ref5){var routeParamList=_ref5.routeParamList;switch(action.type){case'JUMP_TO':case'NAVIGATE':{var index=-1;if(action.type==='NAVIGATE'&&action.payload.key){index=state.routes.findIndex(function(route){return route.key===action.payload.key;});}else{index=state.routes.findIndex(function(route){return route.name===action.payload.name;});}if(index===-1){return null;}return changeIndex(_objectSpread(_objectSpread({},state),{},{routes:state.routes.map(function(route,i){if(i!==index){return route;}var params;if(action.type==='NAVIGATE'&&action.payload.merge){params=action.payload.params!==undefined||routeParamList[route.name]!==undefined?_objectSpread(_objectSpread(_objectSpread({},routeParamList[route.name]),route.params),action.payload.params):route.params;}else{params=routeParamList[route.name]!==undefined?_objectSpread(_objectSpread({},routeParamList[route.name]),action.payload.params):action.payload.params;}var path=action.type==='NAVIGATE'&&action.payload.path!=null?action.payload.path:route.path;return params!==route.params||path!==route.path?_objectSpread(_objectSpread({},route),{},{path:path,params:params}):route;})}),index,backBehavior,initialRouteName);}case'GO_BACK':{if(state.history.length===1){return null;}var previousKey=state.history[state.history.length-2].key;var _index=state.routes.findIndex(function(route){return route.key===previousKey;});if(_index===-1){return null;}return _objectSpread(_objectSpread({},state),{},{history:state.history.slice(0,-1),index:_index});}default:return BaseRouter.getStateForAction(state,action);}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';},actionCreators:TabActions});return router;}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","type","payload","name","params","getRouteHistory","history","key","routes","i","index","initialRouteIndex","route","changeIndex","backBehavior","currentKey","state","it","router","getInitialState","routeParamList","initialRouteName","routeNames","nanoid","stale","getRehydratedState","r","undefined","Math","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","path","previousKey","BaseRouter","shouldActionChangeFocus","actionCreators"],"mappings":"w0BAAA,OAAA,MAAA,KAAA,mBAAA,CAEA,MAAA,WAAA,oBAyDA,GAAMA,WAAU,CAAhB,OAAA,CAEA,MAAO,IAAMC,WAAU,CAAG,CACxBC,MADwB,iBAClB,IADkB,CAClB,MADkB,CAC6B,CACnD,MAAO,CAAEC,IAAI,CAAN,SAAA,CAAmBC,OAAO,CAAE,CAAEC,IAAF,CAAEA,IAAF,CAAQC,MAAAA,CAAAA,MAAR,CAA5B,CAAP,CACD,CAHuB,CAAnB,CAMP,GAAMC,gBAAe,CAAG,QAAlBA,gBAAkB,CAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAA,gBAAA,CAKnB,CACH,GAAMC,QAAO,CAAG,CAAC,CAAEL,IAAI,CAAN,UAAA,CAAoBM,GAAG,CAAEC,MAAM,CAANA,KAAM,CAANA,CAAcD,GAAvC,CAAD,CAAhB,CACA,GAAA,kBAAA,CAEA,OAAA,YAAA,EACE,IAAA,OAAA,CACE,IAAK,GAAIE,EAAC,CAAV,KAAA,CAAoBA,CAAC,CAArB,CAAA,CAA2BA,CAA3B,EAAA,CAAgC,CAC9BH,OAAO,CAAPA,OAAAA,CAAgB,CAAEL,IAAI,CAAN,UAAA,CAAoBM,GAAG,CAAEC,MAAM,CAACC,CAAC,CAARD,CAAM,CAANA,CAAcD,GAAvC,CAAhBD,EACD,CACD,MACF,IAAA,YAAA,CACE,GAAII,KAAK,GAAT,CAAA,CAAiB,CACfJ,OAAO,CAAPA,OAAAA,CAAgB,CACdL,IAAI,CADU,UAAA,CAEdM,GAAG,CAAEC,MAAM,CAANA,CAAM,CAANA,CAAUD,GAFD,CAAhBD,EAID,CACD,MACF,IAAA,cAAA,CACEK,iBAAiB,CAAGH,MAAM,CAANA,SAAAA,CACjBI,SAAAA,KAAD,QAAWA,MAAK,CAALA,IAAAA,GADbD,gBACE,EADkBH,CAApBG,CAGAA,iBAAiB,CAAGA,iBAAiB,GAAK,CAAtBA,CAAAA,CAAAA,CAAAA,CAApBA,iBAAAA,CAEA,GAAID,KAAK,GAAT,iBAAA,CAAiC,CAC/BJ,OAAO,CAAPA,OAAAA,CAAgB,CACdL,IAAI,CADU,UAAA,CAEdM,GAAG,CAAEC,MAAM,CAANA,iBAAM,CAANA,CAA0BD,GAFjB,CAAhBD,EAID,CACD,MACF,IAAA,SAAA,CAEE,MA7BJ,CAgCA,MAAA,QAAA,CAzCF,CAAA,CA4CA,GAAMO,YAAW,CAAG,QAAdA,YAAc,CAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CAAA,gBAAA,CAKf,CACH,GAAA,QAAA,CAEA,GAAIC,YAAY,GAAhB,SAAA,CAAgC,CAC9B,GAAMC,WAAU,CAAGC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EAAnB,GAAA,CAEAV,OAAO,CAAG,KAAK,CAAL,OAAA,CAAA,MAAA,CACCW,SAAAA,EAAD,QAASA,GAAE,CAAFA,IAAAA,GAAAA,OAAAA,CAAsBA,EAAE,CAAFA,GAAAA,GAAtBA,UAAAA,CADT,KACA,EADA,EAAA,MAAA,CAEA,CAAEhB,IAAI,CAAN,UAAA,CAAoBM,GAAG,CAAEQ,UAAzB,CAFA,CAAVT,CAHF,CAAA,IAMO,CACLA,OAAO,CAAGD,eAAe,CACvBW,KAAK,CADkB,MAAA,CAAA,KAAA,CAAA,YAAA,CAAzBV,gBAAyB,CAAzBA,CAMD,CAED,sCAAO,KAAP,MAEEI,KAFK,CAELA,KAFF,CAGEJ,OAAAA,CAAAA,OAHF,GAvBF,CAAA,CA8BA,cAAe,SAAA,UAAA,CAAA,IAAA,CAGM,CAHa,GAAA,iBAAA,CAGb,IAHa,CAAA,gBAAA,mBAGb,IAHa,CAEhCQ,YAFgC,CAEhCA,YAFgC,4BAEjB,YAFiB,mBAIhC,GAAMI,OAGL,gCAAG,UAAH,MAGCjB,IAAI,CAHF,KAAH,CAKCkB,eALD,0BAKgB,KALhB,CAKiD,CAAhC,GAAA,WAAA,CAAgC,KAAhC,CAAA,UAAA,CAAcC,cAAd,CAAgC,KAAhC,CAAcA,cAAd,CACd,GAAMV,MAAK,CACTW,gBAAgB,GAAhBA,SAAAA,EAAkCC,UAAU,CAAVA,QAAAA,CAAlCD,gBAAkCC,CAAlCD,CACIC,UAAU,CAAVA,OAAAA,CADJD,gBACIC,CADJD,CADF,CAAA,CAKA,GAAMb,OAAM,CAAG,UAAU,CAAV,GAAA,CAAgBL,SAAAA,IAAD,QAAW,CACvCA,IADuC,CACvCA,IADuC,CAEvCI,GAAG,CAAKJ,IAAL,KAAaoB,MAFuB,EAAA,CAGvCnB,MAAM,CAAEgB,cAAc,CAAA,IAAA,CAHiB,CAAX,EAAf,CAAf,CAMA,GAAMd,QAAO,CAAGD,eAAe,CAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAA/B,gBAA+B,CAA/B,CAOA,MAAO,CACLmB,KAAK,CADA,KAAA,CAELvB,IAAI,CAFC,KAAA,CAGLM,GAAG,QAASgB,MAHP,EAAA,CAILb,KAJK,CAILA,KAJK,CAKLY,UALK,CAKLA,UALK,CAMLhB,OANK,CAMLA,OANK,CAOLE,MAAAA,CAAAA,MAPK,CAAP,CAxBA,CAAH,CAmCCiB,kBAnCD,6BAmCmB,YAnCnB,CAmCmB,KAnCnB,CAmCkE,CAAA,GAAA,cAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,cAAA,CAAhC,GAAA,WAAA,CAAgC,KAAhC,CAAA,UAAA,CAAcL,cAAd,CAAgC,KAAhC,CAAcA,cAAd,CAC/B,GAAIJ,MAAK,CAAT,YAAA,CAEA,GAAIA,KAAK,CAALA,KAAAA,GAAJ,KAAA,CAA2B,CACzB,MAAA,MAAA,CACD,CAED,GAAMR,OAAM,CAAG,UAAU,CAAV,GAAA,CAAgBL,SAAAA,IAAD,CAAU,CACtC,GAAMS,MAAK,CACTI,KADY,CAAA,MACZA,CADY,IACZA,CACaU,SAAAA,CAAD,QAAOA,EAAC,CAADA,IAAAA,GAFrB,IAEc,EADZV,CADF,CAIA,sCAAO,KAAP,MAEEb,IAFK,CAELA,IAFF,CAGEI,GAAG,CACDK,KAAK,EAAIA,KAAK,CAALA,IAAAA,GAATA,IAAAA,EAAgCA,KAAK,CAArCA,GAAAA,CACIA,KAAK,CADTA,GAAAA,CAEOT,IAFPS,KAEeW,MANZ,EAAP,CAOEnB,MAAM,CACJ,cAAc,CAAd,IAAc,CAAd,GAAA,SAAA,gCAESgB,cAAc,CADnB,IACmB,CAFvB,EAGUR,KAAK,CAAGA,KAAK,CAAR,MAAA,CAAT,SAHN,EAKIA,KAAK,CACLA,KAAK,CADA,MAAA,CAELe,SAfR,GALF,CAAe,CAAf,CAwBA,GAAMjB,MAAK,CAAGkB,IAAI,CAAJA,GAAAA,CACZA,IAAI,CAAJA,GAAAA,CAASN,UAAU,CAAVA,OAAAA,CAAAA,CAAAA,aAAAA,CAAmBN,KAAK,CAALA,MAAAA,CAAAA,CAAAA,YAAAA,CAAaA,KAAbA,GAAAA,IAAaA,EAAAA,KAAbA,GAAAA,IAAAA,EAAaA,CAAbA,IAAAA,EAAaA,CAAAA,KAAK,CAAlBA,KAAAA,IAAAA,IAAAA,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,CAAAA,YAAAA,CAAnBM,CAAmBN,CAAnBM,IAAAA,IAAAA,EAAAA,aAAAA,GAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAmBN,aAAAA,CAA5BY,IAASN,CAATM,CADYA,CACZA,CADYA,CAEZpB,MAAM,CAANA,MAAAA,CAFF,CAAcoB,CAAd,CAKA,GAAMtB,QAAO,CAAA,CAAA,qBAAA,CAAA,CAAA,cAAA,CACXU,KAAK,CADM,OAAA,IAAA,IAAA,EAAA,cAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CACXA,cAAAA,CAAAA,MAAAA,CAAuBC,SAAAA,EAAD,QAAQT,OAAM,CAANA,IAAAA,CAAakB,SAAAA,CAAD,QAAOA,EAAC,CAADA,GAAAA,GAAUT,EAAE,CADlD,GAC+B,EAAZT,CAAR,EAAtBQ,CADW,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAb,EAAA,CAIA,MAAOH,YAAW,CAChB,CACEW,KAAK,CADP,KAAA,CAEEvB,IAAI,CAFN,KAAA,CAGEM,GAAG,QAASgB,MAHd,EAAA,CAIEb,KAJF,CAIEA,KAJF,CAKEY,UALF,CAKEA,UALF,CAMEhB,OANF,CAMEA,OANF,CAOEE,MAAAA,CAAAA,MAPF,CADgB,CAAA,KAAA,CAAA,YAAA,CAAlB,gBAAkB,CAAlB,CA3EA,CAAH,CA2FCqB,2BA3FD,sCA2F4B,KA3F5B,CA2F4B,KA3F5B,CA8FG,CADA,GAAA,WAAA,CACA,KADA,CAAA,UAAA,CAAA,cAAA,CACA,KADA,CAAA,cAAA,CAA8BC,eAA9B,CACA,KADA,CAA8BA,eAA9B,CAEA,GAAMtB,OAAM,CAAG,UAAU,CAAV,GAAA,CACZL,SAAAA,IAAD,QACEa,MAAK,CAALA,MAAAA,CAAAA,IAAAA,CACGU,SAAAA,CAAD,QAAOA,EAAC,CAADA,IAAAA,GAAAA,IAAAA,EAAmB,CAACI,eAAe,CAAfA,QAAAA,CAAyBJ,CAAC,CADvDV,IAC6Bc,CAA3B,EADFd,GAEK,CACHb,IADG,CACHA,IADG,CAEHI,GAAG,CAAKJ,IAAL,KAAaoB,MAFb,EAAA,CAGHnB,MAAM,CAAEgB,cAAc,CAAA,IAAA,CAHnB,CAHP,EADa,CAAf,CAWA,GAAMV,MAAK,CAAGkB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,CAEZN,UAAU,CAAVA,OAAAA,CAAmBN,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAFrB,IAEEM,CAFYM,CAAd,CAKA,GAAItB,QAAO,CAAGU,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAEXC,SAAAA,EAAD,QAAQA,GAAE,CAAFA,IAAAA,GAAAA,OAAAA,EAAuBT,MAAM,CAANA,IAAAA,CAAakB,SAAAA,CAAD,QAAOA,EAAC,CAADA,GAAAA,GAAUT,EAAE,CAFhE,GAE6C,EAAZT,CAA/B,EAFYQ,CAAd,CAKA,GAAI,CAACV,OAAO,CAAZ,MAAA,CAAqB,CACnBA,OAAO,CAAGD,eAAe,CAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAzBC,gBAAyB,CAAzBA,CAMD,CAED,sCAAO,KAAP,MAEEA,OAFK,CAELA,OAFF,CAGEgB,UAHK,CAGLA,UAHF,CAIEd,MAJK,CAILA,MAJF,CAKEE,KAAAA,CAAAA,KALF,GA7HA,CAAH,CAsICqB,qBAtID,gCAsIsB,KAtItB,CAsIsB,GAtItB,CAsImC,CAChC,GAAMrB,MAAK,CAAGM,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBU,SAAAA,CAAD,QAAOA,EAAC,CAADA,GAAAA,GAA5C,GAAqC,EAAvBV,CAAd,CAEA,GAAIN,KAAK,GAAK,CAAVA,CAAAA,EAAgBA,KAAK,GAAKM,KAAK,CAAnC,KAAA,CAA2C,CACzC,MAAA,MAAA,CACD,CAED,MAAOH,YAAW,CAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CAAlB,gBAAkB,CAAlB,CA7IA,CAAH,CAgJCmB,iBAhJD,4BAgJkB,KAhJlB,CAgJkB,MAhJlB,CAgJkB,KAhJlB,CAgJsD,CAApB,GAAEZ,eAAF,CAAoB,KAApB,CAAEA,cAAF,CAC/B,OAAQa,MAAM,CAAd,IAAA,EACE,IAAA,SAAA,CACA,IAAA,UAAA,CAAiB,CACf,GAAIvB,MAAK,CAAG,CAAZ,CAAA,CAEA,GAAIuB,MAAM,CAANA,IAAAA,GAAAA,UAAAA,EAA8BA,MAAM,CAANA,OAAAA,CAAlC,GAAA,CAAsD,CACpDvB,KAAK,CAAGM,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACLJ,SAAAA,KAAD,QAAWA,MAAK,CAALA,GAAAA,GAAcqB,MAAM,CAANA,OAAAA,CAD3BvB,GACE,EADMM,CAARN,CADF,CAAA,IAIO,CACLA,KAAK,CAAGM,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACLJ,SAAAA,KAAD,QAAWA,MAAK,CAALA,IAAAA,GAAeqB,MAAM,CAANA,OAAAA,CAD5BvB,IACE,EADMM,CAARN,CAGD,CAED,GAAIA,KAAK,GAAK,CAAd,CAAA,CAAkB,CAChB,MAAA,KAAA,CACD,CAED,MAAOG,YAAW,gCAChB,KADgB,MAGdL,MAAM,CAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,KAAA,CAAA,CAAA,CAAc,CACrC,GAAIC,CAAC,GAAL,KAAA,CAAiB,CACf,MAAA,MAAA,CACD,CAED,GAAA,OAAA,CAEA,GAAIwB,MAAM,CAANA,IAAAA,GAAAA,UAAAA,EAA8BA,MAAM,CAANA,OAAAA,CAAlC,KAAA,CAAwD,CACtD7B,MAAM,CACJ,MAAM,CAAN,OAAA,CAAA,MAAA,GAAA,SAAA,EACAgB,cAAc,CAACR,KAAK,CAApBQ,IAAc,CAAdA,GADA,SAAA,8CAGSA,cAAc,CAACR,KAAK,CADzB,IACmB,CAHvB,EAISA,KAAK,CAFV,MAFJ,EAKSqB,MAAM,CAANA,OAAAA,CAAe7B,MALxB,EAOIQ,KAAK,CARXR,MAAAA,CADF,CAAA,IAUO,CACLA,MAAM,CACJ,cAAc,CAACQ,KAAK,CAApB,IAAc,CAAd,GAAA,SAAA,gCAESQ,cAAc,CAACR,KAAK,CADzB,IACmB,CAFvB,EAGSqB,MAAM,CAANA,OAAAA,CAAe7B,MAHxB,EAKI6B,MAAM,CAANA,OAAAA,CANN7B,MAAAA,CAOD,CAED,GAAM8B,KAAI,CACRD,MAAM,CAANA,IAAAA,GAAAA,UAAAA,EAA8BA,MAAM,CAANA,OAAAA,CAAAA,IAAAA,EAA9BA,IAAAA,CACIA,MAAM,CAANA,OAAAA,CADJA,IAAAA,CAEIrB,KAAK,CAHX,IAAA,CAKA,MAAO,OAAM,GAAKA,KAAK,CAAhB,MAAA,EAA2BsB,IAAI,GAAKtB,KAAK,CAAzC,IAAA,gCACH,KADG,MACSsB,IAAZ,CAAYA,IADT,CACe9B,MAAAA,CAAAA,MADf,GAAP,KAAA,CAhCM,CAAA,CAHM,GAAA,KAAA,CAAA,YAAA,CAAlB,gBAAkB,CAAlB,CA4CD,CAED,IAAA,SAAA,CAAgB,CACd,GAAIY,KAAK,CAALA,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,CAAgC,CAC9B,MAAA,KAAA,CACD,CAED,GAAMmB,YAAW,CAAGnB,KAAK,CAALA,OAAAA,CAAcA,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAAdA,CAAAA,EAApB,GAAA,CACA,GAAMN,OAAK,CAAGM,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACXJ,SAAAA,KAAD,QAAWA,MAAK,CAALA,GAAAA,GADb,WACE,EADYI,CAAd,CAIA,GAAIN,MAAK,GAAK,CAAd,CAAA,CAAkB,CAChB,MAAA,KAAA,CACD,CAED,sCAAO,KAAP,MAEEJ,OAAO,CAAEU,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAuB,CAF3B,CAEIA,CAFX,CAGEN,KAAAA,CAAAA,MAHF,GAKD,CAED,QACE,MAAO0B,WAAU,CAAVA,iBAAAA,CAAAA,KAAAA,CAAP,MAAOA,CAAP,CAvFJ,CAjJA,CAAH,CA4OCC,uBA5OD,kCA4OwB,MA5OxB,CA4OiC,CAC9B,MAAOJ,OAAM,CAANA,IAAAA,GAAP,UAAA,CA7OA,CAAH,CAgPCK,cAAc,CAAEvC,UAhPjB,EAHD,CAsPA,MAAA,OAAA,CACD","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}