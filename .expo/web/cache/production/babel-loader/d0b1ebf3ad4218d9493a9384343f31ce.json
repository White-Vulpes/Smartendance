{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import{useState}from'react';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var _useState=useState(navigation.isFocused),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useNavigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":"iEAAA,MAAO,GAAP,MAAA,KAAA,OAAA,CACA,OAAA,QAAA,KAAA,OAAA,CAEA,MAAA,cAAA,uBAMA,cAAe,SAAA,aAAA,EAAiC,CAC9C,GAAMA,WAAU,CAAGC,aAAnB,EAAA,CACA,cAAkCC,QAAQ,CAACF,UAAU,CAArD,SAA0C,CAA1C,wCAAM,SAAN,eAAM,YAAN,eAEA,GAAMG,cAAa,CAAGH,UAAU,CAAhC,SAAsBA,EAAtB,CAEA,GAAII,SAAS,GAAb,aAAA,CAAiC,CAM/BC,YAAY,CAAZA,aAAY,CAAZA,CACD,CAEDC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,iBAAgB,CAAGP,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,CAAgC,iBACvDK,aAAY,CADd,IACc,CAD2C,EAAhCL,CAAzB,CAIA,GAAMQ,gBAAe,CAAGR,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,CAA+B,iBACrDK,aAAY,CADd,KACc,CADyC,EAA/BL,CAAxB,CAIA,MAAO,WAAM,CACXO,gBAAgB,GAChBC,eAAe,GAFjB,CAAA,CATFF,CAAAA,CAaG,CAbHA,UAaG,CAbHA,EAeAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA,EAEA,MAAA,cAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"module"}