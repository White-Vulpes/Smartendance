{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"defaultStatus\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{nanoid}from'nanoid/non-secure';import TabRouter,{TabActions}from\"./TabRouter\";export var DrawerActions=_objectSpread(_objectSpread({},TabActions),{},{openDrawer:function openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer:function closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer:function toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});export default function DrawerRouter(_ref){var _ref$defaultStatus=_ref.defaultStatus,defaultStatus=_ref$defaultStatus===void 0?'closed':_ref$defaultStatus,rest=_objectWithoutProperties(_ref,_excluded);var router=TabRouter(rest);var isDrawerInHistory=function isDrawerInHistory(state){var _state$history;return Boolean((_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.some(function(it){return it.type==='drawer';}));};var addDrawerToHistory=function addDrawerToHistory(state){if(isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:[].concat(_toConsumableArray(state.history),[{type:'drawer',status:defaultStatus==='open'?'closed':'open'}])});};var removeDrawerFromHistory=function removeDrawerFromHistory(state){if(!isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:state.history.filter(function(it){return it.type!=='drawer';})});};var openDrawer=function openDrawer(state){if(defaultStatus==='open'){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);};var closeDrawer=function closeDrawer(state){if(defaultStatus==='open'){return addDrawerToHistory(state);}return removeDrawerFromHistory(state);};return _objectSpread(_objectSpread({},router),{},{type:'drawer',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList,routeGetIdList=_ref2.routeGetIdList;var state=router.getInitialState({routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList});return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,stale:false,type:'drawer',key:\"drawer-\"+nanoid()});},getRehydratedState:function getRehydratedState(partialState,_ref3){var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList,routeGetIdList=_ref3.routeGetIdList;if(partialState.stale===false){return partialState;}var state=router.getRehydratedState(partialState,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList});if(isDrawerInHistory(partialState)){state=removeDrawerFromHistory(state);state=addDrawerToHistory(state);}return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,type:'drawer',key:\"drawer-\"+nanoid()});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var result=router.getStateForRouteFocus(state,key);return closeDrawer(result);},getStateForAction:function getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':return openDrawer(state);case'CLOSE_DRAWER':return closeDrawer(state);case'TOGGLE_DRAWER':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);case'JUMP_TO':case'NAVIGATE':{var result=router.getStateForAction(state,action,options);if(result!=null&&result.index!==state.index){return closeDrawer(result);}return result;}case'GO_BACK':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","it","addDrawerToHistory","history","status","removeDrawerFromHistory","getInitialState","routeGetIdList","routeNames","routeParamList","default","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}