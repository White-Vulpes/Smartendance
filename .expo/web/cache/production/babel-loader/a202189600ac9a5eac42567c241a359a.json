{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';var UNINTIALIZED_STATE={};export default function useSyncState(initialState){var stateRef=React.useRef(UNINTIALIZED_STATE);var isSchedulingRef=React.useRef(false);var isMountedRef=React.useRef(true);React.useEffect(function(){isMountedRef.current=true;return function(){isMountedRef.current=false;};},[]);if(stateRef.current===UNINTIALIZED_STATE){stateRef.current=typeof initialState==='function'?initialState():initialState;}var _React$useState=React.useState(stateRef.current),_React$useState2=_slicedToArray(_React$useState,2),trackingState=_React$useState2[0],setTrackingState=_React$useState2[1];var getState=React.useCallback(function(){return stateRef.current;},[]);var setState=React.useCallback(function(state){if(state===stateRef.current||!isMountedRef.current){return;}stateRef.current=state;if(!isSchedulingRef.current){setTrackingState(state);}},[]);var scheduleUpdate=React.useCallback(function(callback){isSchedulingRef.current=true;try{callback();}finally{isSchedulingRef.current=false;}},[]);var flushUpdates=React.useCallback(function(){if(!isMountedRef.current){return;}setTrackingState(stateRef.current);},[]);if(trackingState!==stateRef.current){setTrackingState(stateRef.current);}var state=stateRef.current;React.useDebugValue(state);return[state,getState,setState,scheduleUpdate,flushUpdates];}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","stateRef","React","isSchedulingRef","isMountedRef","initialState","getState","setState","state","setTrackingState","scheduleUpdate","callback","flushUpdates","trackingState"],"mappings":"iEAAA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,GAAMA,mBAAkB,CAAxB,EAAA,CAKA,cAAe,SAAA,aAAA,CAAA,YAAA,CAAuD,CACpE,GAAMC,SAAQ,CAAGC,KAAK,CAALA,MAAAA,CAAjB,kBAAiBA,CAAjB,CACA,GAAMC,gBAAe,CAAGD,KAAK,CAALA,MAAAA,CAAxB,KAAwBA,CAAxB,CACA,GAAME,aAAY,CAAGF,KAAK,CAALA,MAAAA,CAArB,IAAqBA,CAArB,CAEAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBE,YAAY,CAAZA,OAAAA,CAAAA,IAAAA,CAEA,MAAO,WAAM,CACXA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA,CADF,CAAA,CAHFF,CAAAA,CAAAA,EAAAA,EAQA,GAAID,QAAQ,CAARA,OAAAA,GAAJ,kBAAA,CAA6C,CAC3CA,QAAQ,CAARA,OAAAA,CAEE,MAAA,aAAA,GAAA,UAAA,CAAqCI,YAArC,EAAA,CAFFJ,YAAAA,CAGD,CAED,oBAA0CC,KAAK,CAALA,QAAAA,CAAeD,QAAQ,CAAjE,OAA0CC,CAA1C,oDAAM,aAAN,qBAAM,gBAAN,qBAEA,GAAMI,SAAQ,CAAGJ,KAAK,CAALA,WAAAA,CAAkB,iBAAMD,SAAQ,CAAhCC,OAAkB,EAAlBA,CAAjB,EAAiBA,CAAjB,CAEA,GAAMK,SAAQ,CAAG,KAAK,CAAL,WAAA,CAAmBC,SAAAA,KAAD,CAAc,CAC/C,GAAIA,KAAK,GAAKP,QAAQ,CAAlBO,OAAAA,EAA8B,CAACJ,YAAY,CAA/C,OAAA,CAAyD,CACvD,OACD,CAEDH,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,CAEA,GAAI,CAACE,eAAe,CAApB,OAAA,CAA8B,CAC5BM,gBAAgB,CAAhBA,KAAgB,CAAhBA,CACD,CATc,CAAA,CAAjB,EAAiB,CAAjB,CAYA,GAAMC,eAAc,CAAG,KAAK,CAAL,WAAA,CAAmBC,SAAAA,QAAD,CAA0B,CACjER,eAAe,CAAfA,OAAAA,CAAAA,IAAAA,CAEA,GAAI,CACFQ,QAAQ,GADV,CAAA,OAEU,CACRR,eAAe,CAAfA,OAAAA,CAAAA,KAAAA,CACD,CAPoB,CAAA,CAAvB,EAAuB,CAAvB,CAUA,GAAMS,aAAY,CAAG,KAAK,CAAL,WAAA,CAAkB,UAAM,CAC3C,GAAI,CAACR,YAAY,CAAjB,OAAA,CAA2B,CACzB,OAFyC,CAO3CK,gBAAgB,CAACR,QAAQ,CAAzBQ,OAAgB,CAAhBA,CAPmB,CAAA,CA7C+C,EA6C/C,CAArB,CAYA,GAAII,aAAa,GAAKZ,QAAQ,CAA9B,OAAA,CAAwC,CACtCQ,gBAAgB,CAACR,QAAQ,CAAzBQ,OAAgB,CAAhBA,CACD,CAED,GAAMD,MAAK,CAAGP,QAAQ,CAAtB,OAAA,CAEAC,KAAK,CAALA,aAAAA,CAAAA,KAAAA,EAEA,MAAO,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,cAAA,CAAP,YAAO,CAAP,CACD","sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"module"}