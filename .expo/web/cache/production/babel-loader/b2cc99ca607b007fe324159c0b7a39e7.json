{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","key","root","validKeys","invalidKeys","Object","config","validatePathConfig"],"mappings":"iEAAA,GAAMA,aAAY,CAAIC,QAAhBD,aAAgBC,CAAAA,KAAD,QACnBA,MAAK,CAALA,GAAAA,CAAWC,SAAAA,GAAD,aAAVD,GAAU,EAAVA,EAAAA,IAAAA,CADF,IACEA,CADmB,EAArB,CAGA,cAAe,SAAA,mBAAA,CAAA,MAAA,CAAsD,CAAA,GAAbE,KAAa,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAN,IAAM,CACnE,GAAMC,UAAS,CAAG,CAAA,kBAAA,CAAlB,SAAkB,CAAlB,CAEA,GAAI,CAAJ,IAAA,CAAW,CACTA,SAAS,CAATA,IAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAAAA,OAAAA,EACD,CAED,GAAMC,YAAW,CAAGC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACjBJ,SAAAA,GAAD,QAAS,CAACE,SAAS,CAATA,QAAAA,CADZ,GACYA,CAAV,EADkBE,CAApB,CAIA,GAAID,WAAW,CAAf,MAAA,CAAwB,CACtB,KAAM,IAAA,MAAA,oDAC+CL,YAAY,CAAA,WAAA,CAD3D,sHAGkHA,YAAY,CAHpI,SAGoI,CAH9H,0HAAN,CAOD,CAED,GAAIO,MAAM,CAAV,OAAA,CAAoB,CAClBD,MAAM,CAANA,OAAAA,CAAeC,MAAM,CAArBD,OAAAA,EAAAA,OAAAA,CAAuC,SAAA,IAAA,CAAgB,CAAf,yBAAe,IAAf,IAAA,CAAA,UAAA,KAAA,UACtC,GAAI,MAAA,MAAA,GAAJ,QAAA,CAA+B,CAC7BE,kBAAkB,CAAA,KAAA,CAAlBA,KAAkB,CAAlBA,CACD,CAHHF,CAAAA,EAKD,CACF","sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}