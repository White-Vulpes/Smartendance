{"ast":null,"code":"import{Direction}from\"./web/constants\";import FlingGestureHandler from\"./web/FlingGestureHandler\";import LongPressGestureHandler from\"./web/LongPressGestureHandler\";import NativeViewGestureHandler from\"./web/NativeViewGestureHandler\";import*as NodeManager from\"./web/NodeManager\";import PanGestureHandler from\"./web/PanGestureHandler\";import PinchGestureHandler from\"./web/PinchGestureHandler\";import RotationGestureHandler from\"./web/RotationGestureHandler\";import TapGestureHandler from\"./web/TapGestureHandler\";export var Gestures={PanGestureHandler:PanGestureHandler,RotationGestureHandler:RotationGestureHandler,PinchGestureHandler:PinchGestureHandler,TapGestureHandler:TapGestureHandler,NativeViewGestureHandler:NativeViewGestureHandler,LongPressGestureHandler:LongPressGestureHandler,FlingGestureHandler:FlingGestureHandler};export default{Direction:Direction,handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(!(handlerName in Gestures))throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_usingDeviceEvents,propsRef){NodeManager.getHandler(handlerTag).setView(newView,propsRef);},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){return NodeManager.getHandler(handlerTag);},dropGestureHandler:function dropGestureHandler(handlerTag){NodeManager.dropGestureHandler(handlerTag);}};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","handlerName","GestureClass","NodeManager","attachGestureHandler","updateGestureHandler","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,OAAA,SAAA,uBACA,MAAA,oBAAA,iCACA,MAAA,wBAAA,qCACA,MAAA,yBAAA,sCACA,MAAO,GAAP,YAAA,yBACA,MAAA,kBAAA,+BACA,MAAA,oBAAA,iCACA,MAAA,uBAAA,oCACA,MAAA,kBAAA,+BAEA,MAAO,IAAMA,SAAQ,CAAG,CACtBC,iBADsB,CACtBA,iBADsB,CAEtBC,sBAFsB,CAEtBA,sBAFsB,CAGtBC,mBAHsB,CAGtBA,mBAHsB,CAItBC,iBAJsB,CAItBA,iBAJsB,CAKtBC,wBALsB,CAKtBA,wBALsB,CAMtBC,uBANsB,CAMtBA,uBANsB,CAOtBC,mBAPsB,CAOtBA,mBAPsB,CAAjB,CAWP,cAAe,CACbC,SADa,CACbA,SADa,CAEbC,oBAFa,+BAEO,GAFP,CAEO,oBAFP,CAEoD,CAC/DC,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,EAHW,CAAA,CAKbC,sBALa,kCAKY,CACvBD,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA,EANW,CAAA,CAQbE,oBARa,+BAQO,WARP,CAQO,UARP,CAQO,MARP,CAYX,CAEA,GAAI,EAAEC,WAAW,GAAjB,SAAI,CAAJ,CACE,KAAM,IAAA,MAAA,kCAAN,WAAM,6BAAN,CAGF,GAAMC,aAAY,CAAGd,QAAQ,CAA7B,WAA6B,CAA7B,CACAe,WAAW,CAAXA,oBAAAA,CAAAA,UAAAA,CAA6C,GAA7CA,aAA6C,EAA7CA,EACA,KAAA,oBAAA,CAAA,UAAA,CAAA,MAAA,EApBW,CAAA,CAsBbC,oBAtBa,+BAsBO,UAtBP,CAsBO,OAtBP,CAsBO,kBAtBP,CAsBO,QAtBP,CA2BX,CACAD,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EA5BW,CAAA,CA8BbE,oBA9Ba,+BA8BO,UA9BP,CA8BO,SA9BP,CA8B4C,CACvDF,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA,EA/BW,CAAA,CAiCbG,qBAjCa,gCAiCQ,UAjCR,CAiC6B,CACxC,MAAOH,YAAW,CAAXA,UAAAA,CAAP,UAAOA,CAAP,CAlCW,CAAA,CAoCbI,kBApCa,6BAoCK,UApCL,CAoC0B,CACrCJ,WAAW,CAAXA,kBAAAA,CAAAA,UAAAA,EACD,CAtCY,CAAf","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _usingDeviceEvents: boolean,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}