{"ast":null,"code":"import{nanoid}from'nanoid/non-secure';export default function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var _window$history$state2,_window$history$state3;var path=_ref3.path,state=_ref3.state;interrupt();var id=(_window$history$state2=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id)!==null&&_window$history$state2!==void 0?_window$history$state2:nanoid();if(!items.length||items.findIndex(function(item){return item.id===id;})<0){items=[{path:path,state:state,id:id}];index=0;}else{items[index]={path:path,state:state,id:id};}window.history.replaceState({id:id},'',path);},go:function go(n){interrupt();var nextIndex=index+n;var lastItemIndex=items.length-1;if(n<0&&!items[nextIndex]){n=-index;index=0;}else if(n>0&&nextIndex>lastItemIndex){n=lastItemIndex-index;index=lastItemIndex;}else{index=nextIndex;}if(n===0){return;}return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var _window$history$state4;var id=(_window$history$state4=window.history.state)===null||_window$history$state4===void 0?void 0:_window$history$state4.id;var currentIndex=items.findIndex(function(item){return item.id===id;});index=Math.max(currentIndex,0);var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","nextIndex","lastItemIndex","n","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","currentIndex","Math","last","listen","listener"],"mappings":"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","sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"]},"metadata":{},"sourceType":"module"}