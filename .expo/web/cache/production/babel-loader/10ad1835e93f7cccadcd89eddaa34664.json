{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.getState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.getState());}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","useNavigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":"iEACA,MAAO,GAAP,MAAA,KAAA,OAAA,CAGA,MAAA,cAAA,uBAWA,cAAe,SAAA,mBAAA,CAAA,QAAA,CAEV,CACH,GAAMA,WAAU,CAAGC,aADhB,EACH,CAIA,oBAAsBC,KAAK,CAALA,QAAAA,CAAe,iBAAMC,SAAQ,CAACH,UAAU,CAL3D,QAKiDA,EAAD,CAAd,EAAfE,CAAtB,oDAAM,SAAN,qBAGA,GAAME,YAAW,CAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB,CAEAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBE,WAAW,CAAXA,OAAAA,CAAAA,QAAAA,CADFF,CAAAA,EAIAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMG,YAAW,CAAG,UAAU,CAAV,WAAA,CAAA,OAAA,CAAiCC,SAAAA,CAAD,CAAO,CACzDC,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG,CADF,CAAoB,CAApB,CAIA,MAAA,YAAA,CALFL,CAAAA,CAMG,CANHA,UAMG,CANHA,EAQA,MAAOC,SAAQ,CAACH,UAAU,CAA1B,QAAgBA,EAAD,CAAf,CACD","sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}