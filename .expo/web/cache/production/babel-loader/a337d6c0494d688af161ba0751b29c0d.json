{"ast":null,"code":"import*as React from'react';import NavigationContext from\"./NavigationContext\";export default function useFocusEvents(_ref){var state=_ref.state,emitter=_ref.emitter;var navigation=React.useContext(NavigationContext);var lastFocusedKeyRef=React.useRef();var currentFocusedKey=state.routes[state.index].key;React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('focus',function(){lastFocusedKeyRef.current=currentFocusedKey;emitter.emit({type:'focus',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('blur',function(){lastFocusedKeyRef.current=undefined;emitter.emit({type:'blur',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){var lastFocusedKey=lastFocusedKeyRef.current;lastFocusedKeyRef.current=currentFocusedKey;if(lastFocusedKey===undefined&&!navigation){emitter.emit({type:'focus',target:currentFocusedKey});}if(lastFocusedKey===currentFocusedKey||!(navigation?navigation.isFocused():true)){return;}if(lastFocusedKey===undefined){return;}emitter.emit({type:'blur',target:lastFocusedKey});emitter.emit({type:'focus',target:currentFocusedKey});},[currentFocusedKey,emitter,navigation]);}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["emitter","navigation","React","lastFocusedKeyRef","currentFocusedKey","state","type","target","lastFocusedKey"],"mappings":"AACA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,MAAA,kBAAA,2BAYA,cAAe,SAAA,eAAA,CAAA,IAAA,CAGI,CAHmD,GAAA,MAAA,CAGnD,IAHmD,CAAA,KAAA,CAEpEA,OAFoE,CAGnD,IAHmD,CAEpEA,OAFoE,CAIpE,GAAMC,WAAU,CAAGC,KAAK,CAALA,UAAAA,CAAnB,iBAAmBA,CAAnB,CACA,GAAMC,kBAAiB,CAAGD,KAAK,CAA/B,MAA0BA,EAA1B,CAEA,GAAME,kBAAiB,CAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAJT,GAIjB,CAIAH,KAAK,CAALA,SAAAA,CACE,iBACE,WADF,GAAA,IACE,EAAA,UADF,GAAA,IAAA,EACE,CADF,IAAA,EACE,CAAA,UAAU,CAAV,WAAA,CAAA,OAAA,CAAiC,UAAM,CACrCC,iBAAiB,CAAjBA,OAAAA,CAAAA,iBAAAA,CACAH,OAAO,CAAPA,IAAAA,CAAa,CAAEM,IAAI,CAAN,OAAA,CAAiBC,MAAM,CAAEH,iBAAzB,CAAbJ,EAJNE,CAEI,CADF,EADFA,CAME,CAAA,iBAAA,CAAA,OAAA,CANFA,UAME,CANFA,EASAA,KAAK,CAALA,SAAAA,CACE,iBACE,WADF,GAAA,IACE,EAAA,UADF,GAAA,IAAA,EACE,CADF,IAAA,EACE,CAAA,UAAU,CAAV,WAAA,CAAA,MAAA,CAAgC,UAAM,CACpCC,iBAAiB,CAAjBA,OAAAA,CAAAA,SAAAA,CACAH,OAAO,CAAPA,IAAAA,CAAa,CAAEM,IAAI,CAAN,MAAA,CAAgBC,MAAM,CAAEH,iBAAxB,CAAbJ,EAJNE,CAEI,CADF,EADFA,CAME,CAAA,iBAAA,CAAA,OAAA,CANFA,UAME,CANFA,EASAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMM,eAAc,CAAGL,iBAAiB,CAAxC,OAAA,CAEAA,iBAAiB,CAAjBA,OAAAA,CAHoB,iBAGpBA,CAIA,GAAIK,cAAc,GAAdA,SAAAA,EAAgC,CAApC,UAAA,CAAiD,CAC/CR,OAAO,CAAPA,IAAAA,CAAa,CAAEM,IAAI,CAAN,OAAA,CAAiBC,MAAM,CAAEH,iBAAzB,CAAbJ,EARkB,CAapB,GACEQ,cAAc,GAAdA,iBAAAA,EACA,EAAEP,UAAU,CAAGA,UAAU,CAAb,SAAGA,EAAH,CAFd,IAEE,CAFF,CAGE,CACA,OACD,CAED,GAAIO,cAAc,GAAlB,SAAA,CAAkC,CAEhC,OACD,CAEDR,OAAO,CAAPA,IAAAA,CAAa,CAAEM,IAAI,CAAN,MAAA,CAAgBC,MAAM,CAAEC,cAAxB,CAAbR,EACAA,OAAO,CAAPA,IAAAA,CAAa,CAAEM,IAAI,CAAN,OAAA,CAAiBC,MAAM,CAAEH,iBAAzB,CAAbJ,EA1BFE,CAAAA,CA2BG,CAAA,iBAAA,CAAA,OAAA,CA3BHA,UA2BG,CA3BHA,EA4BD","sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}