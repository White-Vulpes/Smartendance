{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";var _excluded=[\"children\",\"screenListeners\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import{isValidElementType}from'react-is';import Group from\"./Group\";import isArrayEqual from\"./isArrayEqual\";import isRecordEqual from\"./isRecordEqual\";import NavigationHelpersContext from\"./NavigationHelpersContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import NavigationStateContext from\"./NavigationStateContext\";import Screen from\"./Screen\";import{PrivateValueStore}from\"./types\";import useChildListeners from\"./useChildListeners\";import useComponent from\"./useComponent\";import useCurrentRender from\"./useCurrentRender\";import useDescriptors from\"./useDescriptors\";import useEventEmitter from\"./useEventEmitter\";import useFocusedListenersChildrenAdapter from\"./useFocusedListenersChildrenAdapter\";import useFocusEvents from\"./useFocusEvents\";import useKeyedChildListeners from\"./useKeyedChildListeners\";import useNavigationHelpers from\"./useNavigationHelpers\";import useOnAction from\"./useOnAction\";import useOnGetState from\"./useOnGetState\";import useOnRouteFocus from\"./useOnRouteFocus\";import useRegisterNavigator from\"./useRegisterNavigator\";import useScheduleUpdate from\"./useScheduleUpdate\";PrivateValueStore;var isValidKey=function isValidKey(key){return key===undefined||typeof key==='string'&&key!=='';};var getRouteConfigsFromChildren=function getRouteConfigsFromChildren(children,groupKey,groupOptions){var configs=React.Children.toArray(children).reduce(function(acc,child){var _child$type,_child$props;if(React.isValidElement(child)){if(child.type===Screen){if(!isValidKey(child.props.navigationKey)){throw new Error(\"Got an invalid 'navigationKey' prop (\"+JSON.stringify(child.props.navigationKey)+\") for the screen '\"+child.props.name+\"'. It must be a non-empty string or 'undefined'.\");}acc.push({keys:[groupKey,child.props.navigationKey],options:groupOptions,props:child.props});return acc;}if(child.type===React.Fragment||child.type===Group){if(!isValidKey(child.props.navigationKey)){throw new Error(\"Got an invalid 'navigationKey' prop (\"+JSON.stringify(child.props.navigationKey)+\") for the group. It must be a non-empty string or 'undefined'.\");}acc.push.apply(acc,_toConsumableArray(getRouteConfigsFromChildren(child.props.children,child.props.navigationKey,child.type!==Group?groupOptions:groupOptions!=null?[].concat(_toConsumableArray(groupOptions),[child.props.screenOptions]):[child.props.screenOptions])));return acc;}}throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \"+(React.isValidElement(child)?\"'\"+(typeof child.type==='string'?child.type:(_child$type=child.type)===null||_child$type===void 0?void 0:_child$type.name)+\"'\"+((_child$props=child.props)!==null&&_child$props!==void 0&&_child$props.name?\" for the screen '\"+child.props.name+\"'\":''):typeof child==='object'?JSON.stringify(child):\"'\"+String(child)+\"'\")+\"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");},[]);if(process.env.NODE_ENV!=='production'){configs.forEach(function(config){var _config$props=config.props,name=_config$props.name,children=_config$props.children,component=_config$props.component,getComponent=_config$props.getComponent;if(typeof name!=='string'||!name){throw new Error(\"Got an invalid name (\"+JSON.stringify(name)+\") for the screen. It must be a non-empty string.\");}if(children!=null||component!==undefined||getComponent!==undefined){if(children!=null&&component!==undefined){throw new Error(\"Got both 'component' and 'children' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(children!=null&&getComponent!==undefined){throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(component!==undefined&&getComponent!==undefined){throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\"+name+\"'. You must pass only one of them.\");}if(children!=null&&typeof children!=='function'){throw new Error(\"Got an invalid value for 'children' prop for the screen '\"+name+\"'. It must be a function returning a React Element.\");}if(component!==undefined&&!isValidElementType(component)){throw new Error(\"Got an invalid value for 'component' prop for the screen '\"+name+\"'. It must be a valid React Component.\");}if(getComponent!==undefined&&typeof getComponent!=='function'){throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\"+name+\"'. It must be a function returning a React Component.\");}if(typeof component==='function'){if(component.name==='component'){console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\"+name+\"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");}else if(/^[a-z]/.test(component.name)){console.warn(\"Got a component with the name '\"+component.name+\"' for the screen '\"+name+\"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");}}}else{throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\"+name+\"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");}});}return configs;};export default function useNavigationBuilder(createRouter,options){var navigatorKey=useRegisterNavigator();var route=React.useContext(NavigationRouteContext);var children=options.children,screenListeners=options.screenListeners,rest=_objectWithoutProperties(options,_excluded);var _React$useRef=React.useRef(createRouter(_objectSpread(_objectSpread({},rest),route!==null&&route!==void 0&&route.params&&route.params.state==null&&route.params.initial!==false&&typeof route.params.screen==='string'?{initialRouteName:route.params.screen}:null))),router=_React$useRef.current;var routeConfigs=getRouteConfigsFromChildren(children);var screens=routeConfigs.reduce(function(acc,config){if(config.props.name in acc){throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\"+config.props.name+\"')\");}acc[config.props.name]=config;return acc;},{});var routeNames=routeConfigs.map(function(config){return config.props.name;});var routeKeyList=routeNames.reduce(function(acc,curr){acc[curr]=screens[curr].keys.map(function(key){return key!==null&&key!==void 0?key:'';}).join(':');return acc;},{});var routeParamList=routeNames.reduce(function(acc,curr){var initialParams=screens[curr].props.initialParams;acc[curr]=initialParams;return acc;},{});var routeGetIdList=routeNames.reduce(function(acc,curr){return _extends(acc,_defineProperty({},curr,screens[curr].props.getId));},{});if(!routeNames.length){throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");}var isStateValid=React.useCallback(function(state){return state.type===undefined||state.type===router.type;},[router.type]);var isStateInitialized=React.useCallback(function(state){return state!==undefined&&state.stale===false&&isStateValid(state);},[isStateValid]);var _React$useContext=React.useContext(NavigationStateContext),currentState=_React$useContext.state,getCurrentState=_React$useContext.getState,setCurrentState=_React$useContext.setState,setKey=_React$useContext.setKey,getKey=_React$useContext.getKey,getIsInitial=_React$useContext.getIsInitial;var stateCleanedUp=React.useRef(false);var cleanUpState=React.useCallback(function(){setCurrentState(undefined);stateCleanedUp.current=true;},[setCurrentState]);var setState=React.useCallback(function(state){if(stateCleanedUp.current){return;}setCurrentState(state);},[setCurrentState]);var _React$useMemo=React.useMemo(function(){var _route$params4;var initialRouteParamList=routeNames.reduce(function(acc,curr){var _route$params,_route$params2,_route$params3;var initialParams=screens[curr].props.initialParams;var initialParamsFromParams=(route===null||route===void 0?void 0:(_route$params=route.params)===null||_route$params===void 0?void 0:_route$params.state)==null&&(route===null||route===void 0?void 0:(_route$params2=route.params)===null||_route$params2===void 0?void 0:_route$params2.initial)!==false&&(route===null||route===void 0?void 0:(_route$params3=route.params)===null||_route$params3===void 0?void 0:_route$params3.screen)===curr?route.params.params:undefined;acc[curr]=initialParams!==undefined||initialParamsFromParams!==undefined?_objectSpread(_objectSpread({},initialParams),initialParamsFromParams):undefined;return acc;},{});if((currentState===undefined||!isStateValid(currentState))&&(route===null||route===void 0?void 0:(_route$params4=route.params)===null||_route$params4===void 0?void 0:_route$params4.state)==null){return[router.getInitialState({routeNames:routeNames,routeParamList:initialRouteParamList,routeGetIdList:routeGetIdList}),true];}else{var _route$params$state,_route$params5;return[router.getRehydratedState((_route$params$state=route===null||route===void 0?void 0:(_route$params5=route.params)===null||_route$params5===void 0?void 0:_route$params5.state)!==null&&_route$params$state!==void 0?_route$params$state:currentState,{routeNames:routeNames,routeParamList:initialRouteParamList,routeGetIdList:routeGetIdList}),false];}},[currentState,router,isStateValid]),_React$useMemo2=_slicedToArray(_React$useMemo,2),initializedState=_React$useMemo2[0],isFirstStateInitialization=_React$useMemo2[1];var previousRouteKeyListRef=React.useRef(routeKeyList);React.useEffect(function(){previousRouteKeyListRef.current=routeKeyList;});var previousRouteKeyList=previousRouteKeyListRef.current;var state=isStateInitialized(currentState)?currentState:initializedState;var nextState=state;if(!isArrayEqual(state.routeNames,routeNames)||!isRecordEqual(routeKeyList,previousRouteKeyList)){nextState=router.getStateForRouteNamesChange(state,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList,routeKeyChanges:Object.keys(routeKeyList).filter(function(name){return previousRouteKeyList.hasOwnProperty(name)&&routeKeyList[name]!==previousRouteKeyList[name];})});}var previousNestedParamsRef=React.useRef(route===null||route===void 0?void 0:route.params);React.useEffect(function(){previousNestedParamsRef.current=route===null||route===void 0?void 0:route.params;},[route===null||route===void 0?void 0:route.params]);if(route!==null&&route!==void 0&&route.params){var previousParams=previousNestedParamsRef.current;var action;if(typeof route.params.state==='object'&&route.params.state!=null&&route.params!==previousParams){action=CommonActions.reset(route.params.state);}else if(typeof route.params.screen==='string'&&(route.params.initial===false&&isFirstStateInitialization||route.params!==previousParams)){action=CommonActions.navigate({name:route.params.screen,params:route.params.params,path:route.params.path});}var updatedState=action?router.getStateForAction(nextState,action,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList}):null;nextState=updatedState!==null?router.getRehydratedState(updatedState,{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList}):nextState;}var shouldUpdate=state!==nextState;useScheduleUpdate(function(){if(shouldUpdate){setState(nextState);}});state=nextState;React.useEffect(function(){setKey(navigatorKey);if(!getIsInitial()){setState(nextState);}return function(){setTimeout(function(){if(getCurrentState()!==undefined&&getKey()===navigatorKey){cleanUpState();}},0);};},[]);var initializedStateRef=React.useRef();initializedStateRef.current=initializedState;var getState=React.useCallback(function(){var currentState=getCurrentState();return isStateInitialized(currentState)?currentState:initializedStateRef.current;},[getCurrentState,isStateInitialized]);var emitter=useEventEmitter(function(e){var _ref;var routeNames=[];var route;if(e.target){var _route;route=state.routes.find(function(route){return route.key===e.target;});if((_route=route)!==null&&_route!==void 0&&_route.name){routeNames.push(route.name);}}else{route=state.routes[state.index];routeNames.push.apply(routeNames,_toConsumableArray(Object.keys(screens).filter(function(name){var _route2;return((_route2=route)===null||_route2===void 0?void 0:_route2.name)===name;})));}if(route==null){return;}var navigation=descriptors[route.key].navigation;var listeners=(_ref=[]).concat.apply(_ref,_toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function(name){var listeners=screens[name].props.listeners;return listeners;}))).map(function(listeners){var map=typeof listeners==='function'?listeners({route:route,navigation:navigation}):listeners;return map?Object.keys(map).filter(function(type){return type===e.type;}).map(function(type){return map===null||map===void 0?void 0:map[type];}):undefined;}))).filter(function(cb,i,self){return cb&&self.lastIndexOf(cb)===i;});listeners.forEach(function(listener){return listener===null||listener===void 0?void 0:listener(e);});});useFocusEvents({state:state,emitter:emitter});React.useEffect(function(){emitter.emit({type:'state',data:{state:state}});},[emitter,state]);var _useChildListeners=useChildListeners(),childListeners=_useChildListeners.listeners,addListener=_useChildListeners.addListener;var _useKeyedChildListene=useKeyedChildListeners(),keyedListeners=_useKeyedChildListene.keyedListeners,addKeyedListener=_useKeyedChildListene.addKeyedListener;var onAction=useOnAction({router:router,getState:getState,setState:setState,key:route===null||route===void 0?void 0:route.key,actionListeners:childListeners.action,beforeRemoveListeners:keyedListeners.beforeRemove,routerConfigOptions:{routeNames:routeNames,routeParamList:routeParamList,routeGetIdList:routeGetIdList},emitter:emitter});var onRouteFocus=useOnRouteFocus({router:router,key:route===null||route===void 0?void 0:route.key,getState:getState,setState:setState});var navigation=useNavigationHelpers({id:options.id,onAction:onAction,getState:getState,emitter:emitter,router:router});useFocusedListenersChildrenAdapter({navigation:navigation,focusedListeners:childListeners.focus});useOnGetState({getState:getState,getStateListeners:keyedListeners.getState});var descriptors=useDescriptors({state:state,screens:screens,navigation:navigation,screenOptions:options.screenOptions,defaultScreenOptions:options.defaultScreenOptions,onAction:onAction,getState:getState,setState:setState,onRouteFocus:onRouteFocus,addListener:addListener,addKeyedListener:addKeyedListener,router:router,emitter:emitter});useCurrentRender({state:state,navigation:navigation,descriptors:descriptors});var NavigationContent=useComponent(NavigationHelpersContext.Provider,{value:navigation});return{state:state,navigation:navigation,descriptors:descriptors,NavigationContent:NavigationContent};}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isValidKey","key","getRouteConfigsFromChildren","configs","React","child","JSON","acc","keys","options","props","groupOptions","name","String","process","config","getComponent","children","component","isValidElementType","console","navigatorKey","useRegisterNavigator","route","rest","current","router","createRouter","initialRouteName","screen","routeConfigs","screens","routeNames","routeKeyList","routeParamList","initialParams","routeGetIdList","getId","isStateValid","state","isStateInitialized","getState","setState","getIsInitial","stateCleanedUp","cleanUpState","setCurrentState","initialRouteParamList","initialParamsFromParams","currentState","previousRouteKeyListRef","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","routeKeyChanges","Object","previousNestedParamsRef","previousParams","action","CommonActions","params","path","updatedState","shouldUpdate","useScheduleUpdate","setKey","setTimeout","getCurrentState","getKey","initializedStateRef","emitter","useEventEmitter","e","navigation","descriptors","listeners","map","type","cb","self","listener","useFocusEvents","data","addListener","useChildListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","actionListeners","childListeners","beforeRemoveListeners","keyedListeners","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","screenOptions","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","value"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}