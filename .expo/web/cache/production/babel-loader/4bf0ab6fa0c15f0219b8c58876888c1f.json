{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"emit\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useNavigationCache(_ref){var state=_ref.state,getState=_ref.getState,navigation=_ref.navigation,_setOptions=_ref.setOptions,router=_ref.router,emitter=_ref.emitter;var _React$useContext=React.useContext(NavigationBuilderContext),stackRef=_React$useContext.stackRef;var cache=React.useMemo(function(){return{current:{}};},[getState,navigation,_setOptions,router,emitter]);var actions=_objectSpread(_objectSpread({},router.actionCreators),CommonActions);cache.current=state.routes.reduce(function(acc,route){var previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{var emit=navigation.emit,rest=_objectWithoutProperties(navigation,_excluded);var _dispatch=function dispatch(thunk){var action=typeof thunk==='function'?thunk(getState()):thunk;if(action!=null){navigation.dispatch(_objectSpread({source:route.key},action));}};var withStack=function withStack(callback){var isStackSet=false;try{if(process.env.NODE_ENV!=='production'&&stackRef&&!stackRef.current){stackRef.current=new Error().stack;isStackSet=true;}callback();}finally{if(isStackSet&&stackRef){stackRef.current=undefined;}}};var helpers=Object.keys(actions).reduce(function(acc,name){acc[name]=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return withStack(function(){return _dispatch(actions[name].apply(actions,args));});};return acc;},{});acc[route.key]=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},rest),helpers),emitter.create(route.key)),{},{dispatch:function dispatch(thunk){return withStack(function(){return _dispatch(thunk);});},getParent:function getParent(id){if(id!==undefined&&id===rest.getId()){return acc[route.key];}return rest.getParent(id);},setOptions:function setOptions(options){return _setOptions(function(o){return _objectSpread(_objectSpread({},o),{},_defineProperty({},route.key,_objectSpread(_objectSpread({},o[route.key]),options)));});},isFocused:function isFocused(){var state=getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return cache.current;}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","stackRef","React","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","thunk","action","getState","navigation","source","withStack","callback","isStackSet","process","helpers","args","getParent","id","setOptions","options","o","isFocused","state"],"mappings":"o7BAAA,OAAA,aAAA,KAAA,2BAAA,CAOA,MAAO,GAAP,MAAA,KAAA,OAAA,CAEA,MAAA,yBAAA,kCAwCA,cAAe,SAAA,mBAAA,CAAA,IAAA,CAWc,CAP3B,GAAA,MAAA,CAO2B,IAP3B,CAAA,KAAA,CAAA,QAAA,CAO2B,IAP3B,CAAA,QAAA,CAAA,UAAA,CAO2B,IAP3B,CAAA,UAAA,CAAA,WAAA,CAO2B,IAP3B,CAAA,UAAA,CAAA,MAAA,CAO2B,IAP3B,CAAA,MAAA,CAMAA,OANA,CAO2B,IAP3B,CAMAA,OANA,CAQA,sBAAqBE,KAAK,CAALA,UAAAA,CADM,wBACNA,CAArB,CAAQD,QAAR,mBAAQA,QAAR,CAKA,GAAME,MAAK,CAAG,KAAK,CAAL,OAAA,CACZ,iBAAO,CAAEC,OAAO,CAAE,EAAX,CAAP,EADY,CAGZ,CAAA,QAAA,CAAA,UAAA,CAAA,WAAA,CAAA,MAAA,CAHF,OAGE,CAHY,CAAd,CAMA,GAAMC,QAAO,gCACRC,MAAM,CADK,cAAH,EAERC,aAFQ,CAAb,CAKAJ,KAAK,CAALA,OAAAA,CAAgB,KAAK,CAAL,MAAA,CAAA,MAAA,CAEd,SAAA,GAAA,CAAA,KAAA,CAAgB,CAChB,GAAMK,SAAQ,CAAGL,KAAK,CAALA,OAAAA,CAAcM,KAAK,CAApC,GAAiBN,CAAjB,CAMA,GAAA,QAAA,CAAc,CAEZO,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,CAAAA,QAAAA,CAFF,CAAA,IAGO,CAEL,GAAM,KAAN,CAAA,UAAA,CAAM,IAAN,CAAiBC,IAAjB,0BAAA,UAAA,YAEA,GAAMC,UAAQ,CAAIC,QAAZD,SAAYC,CAAAA,KAAD,CAAkB,CACjC,GAAMC,OAAM,CAAG,MAAA,MAAA,GAAA,UAAA,CAA8BD,KAAK,CAACE,QAApC,EAAmC,CAAnC,CAAf,KAAA,CAEA,GAAID,MAAM,EAAV,IAAA,CAAoB,CAClBE,UAAU,CAAVA,QAAAA,gBAAsBC,MAAM,CAAER,KAAK,CAAf,GAApBO,EAA4CF,MAA5CE,GACD,CALH,CAAA,CAQA,GAAME,UAAS,CAAIC,QAAbD,UAAaC,CAAAA,QAAD,CAA0B,CAC1C,GAAIC,WAAU,CAAd,KAAA,CAEA,GAAI,CACF,GACEC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAAA,YAAAA,EAAAA,QAAAA,EAEA,CAACpB,QAAQ,CAHX,OAAA,CAIE,CAEAA,QAAQ,CAARA,OAAAA,CAAmB,GAAA,MAAA,GAAnBA,KAAAA,CACAmB,UAAU,CAAVA,IAAAA,CACD,CAEDD,QAAQ,GAXV,CAAA,OAYU,CACR,GAAIC,UAAU,EAAd,QAAA,CAA4B,CAC1BnB,QAAQ,CAARA,OAAAA,CAAAA,SAAAA,CACD,CACF,CAnBH,CAAA,CAsBA,GAAMqB,QAAO,CAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,MAAA,CACd,SAAA,GAAA,CAAA,IAAA,CAAe,CACbZ,GAAG,CAAHA,IAAG,CAAHA,CAAY,UAAA,CAAA,IAAA,GAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAIa,IAAJ,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAIA,IAAJ,CAAA,IAAA,CAAIA,CAAJ,SAAA,CAAA,IAAA,CAAIA,CAAJ,CAAA,MACVL,UAAS,CAAC,iBAERN,UAAQ,CAACP,OAAO,CAAPA,IAAO,CAAPA,OAAAA,OAAO,CAHR,IAGQ,CAAR,CAFA,EAAD,CADC,CAAZK,CAAAA,CAMA,MAAA,IAAA,CARY,CAAA,CAAhB,EAAgB,CAAhB,CAaAA,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,4DAAiB,IAAjBA,EAAiB,OAAjBA,EAIMV,OAAO,CAAPA,MAAAA,CAAeS,KAAK,CAJT,GAIXT,CAJNU,MAKEE,QAAQ,CAAGC,kBAAAA,KAAD,QAAkBK,UAAS,CAAC,iBAAMN,UAAQ,CALrC,KAKqC,CAAd,EAAD,CAA3B,EALZF,CAMEc,SAAS,CAAGC,mBAAAA,EAAD,CAAiB,CAC1B,GAAIA,EAAE,GAAFA,SAAAA,EAAoBA,EAAE,GAAKd,IAAI,CAAnC,KAA+BA,EAA/B,CAA6C,CAG3C,MAAOD,IAAG,CAACD,KAAK,CAAhB,GAAU,CAAV,CACD,CAED,MAAOE,KAAI,CAAJA,SAAAA,CAAP,EAAOA,CAAP,CAba,CAAjBD,CAeEgB,UAAU,CAAGC,oBAAAA,OAAD,QACVD,YAAU,CAAEE,SAAAA,CAAD,wCAAQ,CAAR,wBAERnB,KAAK,CAAN,GAFS,gCAESmB,CAAC,CAACnB,KAAK,CAAZ,GAAM,CAFV,EAE0BkB,OAF1B,KAAD,CADA,EAfdjB,CAoBEmB,SAAS,CAAE,oBAAM,CACf,GAAMC,MAAK,CAAGf,QAAd,EAAA,CAEA,GAAIe,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAAA,GAAAA,GAAkCrB,KAAK,CAA3C,GAAA,CAAiD,CAC/C,MAAA,MAAA,CAJa,CASf,MAAOO,WAAU,CAAGA,UAAU,CAAb,SAAGA,EAAH,CAAjB,IAAA,CACD,CA9BHN,GAgCD,CAED,MAAA,IAAA,CA7Fc,CAAA,CAAhBP,EAAgB,CAAhBA,CAgGA,MAAOA,MAAK,CAAZ,OAAA,CACD","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}