{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions,DrawerActions,useLinkBuilder}from'@react-navigation/native';import*as React from'react';import DrawerItem from\"./DrawerItem\";export default function DrawerItemList(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors;var buildLink=useLinkBuilder();var focusedRoute=state.routes[state.index];var focusedDescriptor=descriptors[focusedRoute.key];var focusedOptions=focusedDescriptor.options;var drawerActiveTintColor=focusedOptions.drawerActiveTintColor,drawerInactiveTintColor=focusedOptions.drawerInactiveTintColor,drawerActiveBackgroundColor=focusedOptions.drawerActiveBackgroundColor,drawerInactiveBackgroundColor=focusedOptions.drawerInactiveBackgroundColor;return state.routes.map(function(route,i){var focused=i===state.index;var onPress=function onPress(){var event=navigation.emit({type:'drawerItemPress',target:route.key,canPreventDefault:true});if(!event.defaultPrevented){navigation.dispatch(_objectSpread(_objectSpread({},focused?DrawerActions.closeDrawer():CommonActions.navigate({name:route.name,merge:true})),{},{target:state.key}));}};var _descriptors$route$ke=descriptors[route.key].options,title=_descriptors$route$ke.title,drawerLabel=_descriptors$route$ke.drawerLabel,drawerIcon=_descriptors$route$ke.drawerIcon,drawerLabelStyle=_descriptors$route$ke.drawerLabelStyle,drawerItemStyle=_descriptors$route$ke.drawerItemStyle,drawerAllowFontScaling=_descriptors$route$ke.drawerAllowFontScaling;return React.createElement(DrawerItem,{key:route.key,label:drawerLabel!==undefined?drawerLabel:title!==undefined?title:route.name,icon:drawerIcon,focused:focused,activeTintColor:drawerActiveTintColor,inactiveTintColor:drawerInactiveTintColor,activeBackgroundColor:drawerActiveBackgroundColor,inactiveBackgroundColor:drawerInactiveBackgroundColor,allowFontScaling:drawerAllowFontScaling,labelStyle:drawerLabelStyle,style:drawerItemStyle,to:buildLink(route.name,route.params),onPress:onPress});});}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["descriptors","buildLink","useLinkBuilder","focusedRoute","state","focusedDescriptor","focusedOptions","drawerInactiveBackgroundColor","focused","i","onPress","event","type","target","route","canPreventDefault","navigation","DrawerActions","name","merge","key","drawerAllowFontScaling","drawerLabel","title"],"mappings":"w0BAAA,OAAA,aAAA,CAAA,aAAA,CAAA,cAAA,KAAA,0BAAA,CAOA,MAAO,GAAP,MAAA,KAAA,OAAA,CAGA,MAAA,WAAA,oBAWA,cAAe,SAAA,eAAA,CAAA,IAAA,CAIL,CAJ6B,GAAA,MAAA,CAI7B,IAJ6B,CAAA,KAAA,CAAA,UAAA,CAI7B,IAJ6B,CAAA,UAAA,CAGrCA,WAHqC,CAI7B,IAJ6B,CAGrCA,WAHqC,CAKrC,GAAMC,UAAS,CAAGC,cAAlB,EAAA,CAEA,GAAMC,aAAY,CAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB,CACA,GAAMC,kBAAiB,CAAGL,WAAW,CAACG,YAAY,CAAlD,GAAqC,CAArC,CACA,GAAMG,eAAc,CAAGD,iBAAiB,CAAxC,OAAA,CAEA,GAAM,sBAAN,CAAA,cAAA,CAAM,qBAAN,CAAM,uBAAN,CAAA,cAAA,CAAM,uBAAN,CAAM,2BAAN,CAAA,cAAA,CAAM,2BAAN,CAIEE,6BAJF,CAAA,cAAA,CAIEA,6BAJF,CAOA,MAAO,MAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,KAAA,CAAA,CAAA,CAAc,CACpC,GAAMC,QAAO,CAAGC,CAAC,GAAKL,KAAK,CAA3B,KAAA,CAEA,GAAMM,QAAO,CAAG,QAAVA,QAAU,EAAM,CACpB,GAAMC,MAAK,CAAG,UAAU,CAAV,IAAA,CAAgB,CAC5BC,IAAI,CADwB,iBAAA,CAE5BC,MAAM,CAAEC,KAAK,CAFe,GAAA,CAG5BC,iBAAiB,CAAE,IAHS,CAAhB,CAAd,CAMA,GAAI,CAACJ,KAAK,CAAV,gBAAA,CAA6B,CAC3BK,UAAU,CAAVA,QAAAA,gCACMR,OAAO,CACPS,aAAa,CADN,WACPA,EADO,CAEP,aAAa,CAAb,QAAA,CAAuB,CAAEC,IAAI,CAAEJ,KAAK,CAAb,IAAA,CAAoBK,KAAK,CAAE,IAA3B,CAAvB,CAHNH,MAIEH,MAAM,CAAET,KAAK,CAACgB,GAJhBJ,IAMD,CAdH,CAAA,CAiBA,0BAOIhB,WAAW,CAACc,KAAK,CAAjBd,GAAW,CAAXA,CAPJ,OAAA,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAAM,UAAN,uBAAM,UAAN,CAAM,gBAAN,uBAAM,gBAAN,CAAM,eAAN,uBAAM,eAAN,CAMEqB,sBANF,uBAMEA,sBANF,CASA,MACE,MAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CACE,GAAG,CAAEP,KAAK,CADZ,GAAA,CAEE,KAAK,CACHQ,WAAW,GAAXA,SAAAA,CAAAA,WAAAA,CAEIC,KAAK,GAALA,SAAAA,CAAAA,KAAAA,CAEAT,KAAK,CAPb,IAAA,CASE,IAAI,CATN,UAAA,CAUE,OAAO,CAVT,OAAA,CAWE,eAAe,CAXjB,qBAAA,CAYE,iBAAiB,CAZnB,uBAAA,CAaE,qBAAqB,CAbvB,2BAAA,CAcE,uBAAuB,CAdzB,6BAAA,CAeE,gBAAgB,CAflB,sBAAA,CAgBE,UAAU,CAhBZ,gBAAA,CAiBE,KAAK,CAjBP,eAAA,CAkBE,EAAE,CAAEb,SAAS,CAACa,KAAK,CAAN,IAAA,CAAaA,KAAK,CAlBjC,MAkBe,CAlBf,CAmBE,OAAO,CAAEJ,OAnBX,CAAA,CADF,CA7BF,CAAO,CAAP,CAqDD","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}