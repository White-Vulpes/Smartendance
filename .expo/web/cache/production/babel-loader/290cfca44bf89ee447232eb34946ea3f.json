{"ast":null,"code":"export function goBack(){return{type:'GO_BACK'};}export function navigate(){if(typeof(arguments.length<=0?undefined:arguments[0])==='string'){return{type:'NAVIGATE',payload:{name:arguments.length<=0?undefined:arguments[0],params:arguments.length<=1?undefined:arguments[1]}};}else{var payload=(arguments.length<=0?undefined:arguments[0])||{};if(!payload.hasOwnProperty('key')&&!payload.hasOwnProperty('name')){throw new Error('You need to specify name or key when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.');}return{type:'NAVIGATE',payload:payload};}}export function reset(state){return{type:'RESET',payload:state};}export function setParams(params){return{type:'SET_PARAMS',payload:{params:params}};}","map":{"version":3,"sources":["CommonActions.tsx"],"names":["type","payload","name","params","state"],"mappings":"AAgDA,MAAO,SAAA,OAAA,EAA0B,CAC/B,MAAO,CAAEA,IAAI,CAAE,SAAR,CAAP,CACD,CAgBD,MAAO,SAAA,SAAA,EAAwC,CAC7C,GAAI,OAAA,SAAA,CAAA,MAAA,EAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,IAAJ,QAAA,CAAiC,CAC/B,MAAO,CAAEA,IAAI,CAAN,UAAA,CAAoBC,OAAO,CAAE,CAAEC,IAAI,CAAA,SAAA,CAAA,MAAA,EAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAN,CAAM,CAAN,CAAiBC,MAAM,CAAA,SAAA,CAAA,MAAA,EAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAvB,CAA7B,CAAP,CADF,CAAA,IAEO,CACL,GAAMF,QAAO,CAAG,CAAA,SAAA,CAAA,MAAA,EAAA,CAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,GAAhB,EAAA,CAEA,GAAI,CAACA,OAAO,CAAPA,cAAAA,CAAD,KAACA,CAAD,EAAkC,CAACA,OAAO,CAAPA,cAAAA,CAAvC,MAAuCA,CAAvC,CAAuE,CACrE,KAAM,IAAA,MAAA,CAAN,mKAAM,CAAN,CAGD,CAED,MAAO,CAAED,IAAI,CAAN,UAAA,CAAoBC,OAAAA,CAAAA,OAApB,CAAP,CACD,CACF,CAED,MAAO,SAAA,MAAA,CAAA,KAAA,CAAsD,CAC3D,MAAO,CAAED,IAAI,CAAN,OAAA,CAAiBC,OAAO,CAAEG,KAA1B,CAAP,CACD,CAED,MAAO,SAAA,UAAA,CAAA,MAAA,CAA2C,CAChD,MAAO,CAAEJ,IAAI,CAAN,YAAA,CAAsBC,OAAO,CAAE,CAAEE,MAAAA,CAAAA,MAAF,CAA/B,CAAP,CACD","sourcesContent":["import type { NavigationState, PartialState, Route } from './types';\n\ntype ResetState =\n  | PartialState<NavigationState>\n  | NavigationState\n  | (Omit<NavigationState, 'routes'> & {\n      routes: Omit<Route<string>, 'key'>[];\n    });\n\nexport type Action =\n  | {\n      type: 'GO_BACK';\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'NAVIGATE';\n      payload:\n        | {\n            key: string;\n            name?: undefined;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          }\n        | {\n            name: string;\n            key?: string;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'RESET';\n      payload: ResetState | undefined;\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'SET_PARAMS';\n      payload: { params?: object };\n      source?: string;\n      target?: string;\n    };\n\nexport function goBack(): Action {\n  return { type: 'GO_BACK' };\n}\n\nexport function navigate(\n  options:\n    | { key: string; params?: object; path?: string; merge?: boolean }\n    | {\n        name: string;\n        key?: string;\n        params?: object;\n        path?: string;\n        merge?: boolean;\n      }\n): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(name: string, params?: object): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(...args: any): Action {\n  if (typeof args[0] === 'string') {\n    return { type: 'NAVIGATE', payload: { name: args[0], params: args[1] } };\n  } else {\n    const payload = args[0] || {};\n\n    if (!payload.hasOwnProperty('key') && !payload.hasOwnProperty('name')) {\n      throw new Error(\n        'You need to specify name or key when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.'\n      );\n    }\n\n    return { type: 'NAVIGATE', payload };\n  }\n}\n\nexport function reset(state: ResetState | undefined): Action {\n  return { type: 'RESET', payload: state };\n}\n\nexport function setParams(params: object): Action {\n  return { type: 'SET_PARAMS', payload: { params } };\n}\n"]},"metadata":{},"sourceType":"module"}