{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import{useImperativeHandle,useRef}from'react';import{NativeViewGestureHandler,nativeViewProps}from\"./NativeViewGestureHandler\";var NATIVE_WRAPPER_PROPS_FILTER=[].concat(_toConsumableArray(nativeViewProps),['onGestureHandlerEvent','onGestureHandlerStateChange']);export default function createNativeWrapper(Component){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var ComponentWrapper=React.forwardRef(function(props,ref){var gestureHandlerProps=Object.keys(props).reduce(function(res,key){var allowedKeys=NATIVE_WRAPPER_PROPS_FILTER;if(allowedKeys.includes(key)){res[key]=props[key];}return res;},_objectSpread({},config));var _ref=useRef();var _gestureHandlerRef=useRef();useImperativeHandle(ref,function(){var node=_gestureHandlerRef.current;if(_ref.current&&node){_ref.current.handlerTag=node.handlerTag;return _ref.current;}return null;},[_ref,_gestureHandlerRef]);return React.createElement(NativeViewGestureHandler,_extends({},gestureHandlerProps,{ref:_gestureHandlerRef}),React.createElement(Component,_extends({},props,{ref:_ref})));});ComponentWrapper.displayName=Component.displayName||'ComponentWrapper';return ComponentWrapper;}","map":{"version":3,"sources":["createNativeWrapper.tsx"],"names":["NATIVE_WRAPPER_PROPS_FILTER","config","ComponentWrapper","gestureHandlerProps","allowedKeys","res","props","_ref","useRef","_gestureHandlerRef","useImperativeHandle","node","Component"],"mappings":"wqCAAA,MAAO,GAAP,MAAA,KAAA,OAAA,CACA,OAAA,mBAAA,CAAA,MAAA,KAAA,OAAA,CAEA,OAAA,wBAAA,CAAA,eAAA,kCAaA,GAAMA,4BAA2B,8BAAG,eAAH,GAAG,uBAAH,CAAjC,6BAAiC,EAAjC,CAMA,cAAe,SAAA,oBAAA,CAAA,SAAA,CAGb,IADAC,OACA,2DAHa,EAGb,CACA,GAAMC,iBAAgB,CAAG,KAAK,CAAL,UAAA,CAGvB,SAAA,KAAA,CAAA,GAAA,CAAgB,CAEhB,GAAMC,oBAAmB,CAAG,MAAM,CAAN,IAAA,CAAA,KAAA,EAAA,MAAA,CAC1B,SAAA,GAAA,CAAA,GAAA,CAAc,CAEZ,GAAMC,YAA8B,CAApC,2BAAA,CACA,GAAIA,WAAW,CAAXA,QAAAA,CAAJ,GAAIA,CAAJ,CAA+B,CAE7BC,GAAG,CAAHA,GAAG,CAAHA,CAAWC,KAAK,CAAhBD,GAAgB,CAAhBA,CACD,CACD,MAAA,IAAA,CARwB,CAAA,kBAUrBJ,MAVqB,EAA5B,CAYA,GAAMM,KAAI,CAAGC,MAAb,EAAA,CACA,GAAMC,mBAAkB,CAAGD,MAA3B,EAAA,CACAE,mBAAmB,CAAA,GAAA,CAGjB,UAAM,CACJ,GAAMC,KAAI,CAAGF,kBAAkB,CAD3B,OACJ,CAEA,GAAIF,IAAI,CAAJA,OAAAA,EAAJ,IAAA,CAA0B,CAExBA,IAAI,CAAJA,OAAAA,CAAAA,UAAAA,CAA0BI,IAAI,CAA9BJ,UAAAA,CACA,MAAOA,KAAI,CAAX,OAAA,CACD,CACD,MAAA,KAAA,CAXe,CAAA,CAajB,CAAA,IAAA,CAbFG,kBAaE,CAbiB,CAAnBA,CAeA,MACE,MAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,mBAAA,CAAA,CAGE,GAAG,CAAED,kBAHP,CAAA,CAAA,CAIE,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAsB,GAAG,CAAEF,IAA3B,CAAA,CAAA,CAJF,CADF,CAlCF,CAAyB,CAAzB,CA4CAL,gBAAgB,CAAhBA,WAAAA,CAA+BU,SAAS,CAATA,WAAAA,EAA/BV,kBAAAA,CAEA,MAAA,iBAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"module"}