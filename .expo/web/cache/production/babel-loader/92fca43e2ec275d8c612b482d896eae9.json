{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as queryString from'query-string';import fromEntries from\"./fromEntries\";import validatePathConfig from\"./validatePathConfig\";var getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};export default function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){validatePathConfig(options);}var configs=options!==null&&options!==void 0&&options.screens?createNormalizedConfigs(options===null||options===void 0?void 0:options.screens):{};var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern=void 0;var focusedParams=void 0;var focusedRoute=getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){(function(){var stringify=(_currentOptions$route=currentOptions[route.name])===null||_currentOptions$route===void 0?void 0:_currentOptions$route.stringify;var currentParams=fromEntries(Object.entries(route.params).map(function(_ref){var _ref3=_slicedToArray(_ref,2),key=_ref3[0],value=_ref3[1];return[key,stringify!==null&&stringify!==void 0&&stringify[key]?stringify[key](value):String(value)];}));if(pattern){_extends(allParams,currentParams);}if(focusedRoute===route){focusedParams=_objectSpread({},currentParams);(_pattern=pattern)===null||_pattern===void 0?void 0:_pattern.split('/').filter(function(p){return p.startsWith(':');}).forEach(function(p){var name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}})();}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(function(p){var name=getParamName(p);if(p==='*'){return route.name;}if(p.startsWith(':')){var value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return encodeURIComponent(value);}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=\"?\"+query;}}current=route.state;};while(current){var _currentOptions$route;var _pattern;_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;return path;}var getParamName=function getParamName(pattern){return pattern.replace(/^:/,'').replace(/\\?$/,'');};var joinPaths=function joinPaths(){var _ref4;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref4=[]).concat.apply(_ref4,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(config,parentPattern){var _pattern2;if(typeof config==='string'){var _pattern3=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern3};}var pattern;if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:(_pattern2=pattern)===null||_pattern2===void 0?void 0:_pattern2.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return fromEntries(Object.entries(options).map(function(_ref2){var _ref5=_slicedToArray(_ref2,2),name=_ref5[0],c=_ref5[1];var result=createConfigItem(c,pattern);return[name,result];}));};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["getActiveRoute","state","route","Error","validatePathConfig","configs","options","createNormalizedConfigs","path","current","allParams","index","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","stringify","currentParams","fromEntries","String","Object","p","name","getParamName","nextRoute","nestedConfig","value","encodeURIComponent","query","sort","joinPaths","paths","createConfigItem","parentPattern","config","screens","result"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module"}