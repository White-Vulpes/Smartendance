{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{findFocusedRoute,getActionFromState as getActionFromStateDefault,getPathFromState as getPathFromStateDefault,getStateFromPath as getStateFromPathDefault}from'@react-navigation/core';import isEqual from'fast-deep-equal';import*as React from'react';import createMemoryHistory from\"./createMemoryHistory\";import ServerContext from\"./ServerContext\";var findMatchingState=function findMatchingState(a,b){if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}var aHistoryLength=a.history?a.history.length:a.routes.length;var bHistoryLength=b.history?b.history.length:b.routes.length;var aRoute=a.routes[a.index];var bRoute=b.routes[b.index];var aChildState=aRoute.state;var bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};var series=function series(cb){var handling=false;var queue=[];var callback=function _callee(){var last;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!handling){_context.next=4;break;}queue.unshift(callback);return _context.abrupt(\"return\");case 4:handling=true;_context.next=7;return _regeneratorRuntime.awrap(cb());case 7:_context.prev=7;handling=false;if(queue.length){last=queue.pop();last===null||last===void 0?void 0:last();}return _context.finish(7);case 11:case\"end\":return _context.stop();}}},null,null,[[0,,7,11]],Promise);};return callback;};var linkingHandlers=[];export default function useLinking(ref,_ref){var independent=_ref.independent,_ref$enabled=_ref.enabled,enabled=_ref$enabled===void 0?true:_ref$enabled,config=_ref.config,_ref$getStateFromPath=_ref.getStateFromPath,getStateFromPath=_ref$getStateFromPath===void 0?getStateFromPathDefault:_ref$getStateFromPath,_ref$getPathFromState=_ref.getPathFromState,getPathFromState=_ref$getPathFromState===void 0?getPathFromStateDefault:_ref$getPathFromState,_ref$getActionFromSta=_ref.getActionFromState,getActionFromState=_ref$getActionFromSta===void 0?getActionFromStateDefault:_ref$getActionFromSta;React.useEffect(function(){if(process.env.NODE_ENV==='production'){return undefined;}if(independent){return undefined;}if(enabled!==false&&linkingHandlers.length){console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",'- Only a single instance of the root component is rendered'].join('\\n').trim());}var handler=Symbol();if(enabled!==false){linkingHandlers.push(handler);}return function(){var index=linkingHandlers.indexOf(handler);if(index>-1){linkingHandlers.splice(index,1);}};},[enabled,independent]);var _React$useState=React.useState(createMemoryHistory),_React$useState2=_slicedToArray(_React$useState,1),history=_React$useState2[0];var enabledRef=React.useRef(enabled);var configRef=React.useRef(config);var getStateFromPathRef=React.useRef(getStateFromPath);var getPathFromStateRef=React.useRef(getPathFromState);var getActionFromStateRef=React.useRef(getActionFromState);React.useEffect(function(){enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;getActionFromStateRef.current=getActionFromState;});var server=React.useContext(ServerContext);var getInitialState=React.useCallback(function(){var value;if(enabledRef.current){var _server$location;var _location=(_server$location=server===null||server===void 0?void 0:server.location)!==null&&_server$location!==void 0?_server$location:typeof window!=='undefined'?window.location:undefined;var path=_location?_location.pathname+_location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}}var thenable={then:function then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch:function _catch(){return thenable;}};return thenable;},[]);var previousIndexRef=React.useRef(undefined);var previousStateRef=React.useRef(undefined);var pendingPopStatePathRef=React.useRef(undefined);React.useEffect(function(){previousIndexRef.current=history.index;return history.listen(function(){var _previousIndexRef$cur;var navigation=ref.current;if(!navigation||!enabled){return;}var path=location.pathname+location.search;var index=history.index;var previousIndex=(_previousIndexRef$cur=previousIndexRef.current)!==null&&_previousIndexRef$cur!==void 0?_previousIndexRef$cur:0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;var record=history.get(index);if((record===null||record===void 0?void 0:record.path)===path&&record!==null&&record!==void 0&&record.state){navigation.resetRoot(record.state);return;}var state=getStateFromPathRef.current(path,configRef.current);if(state){var rootState=navigation.getRootState();if(state.routes.some(function(r){return!(rootState!==null&&rootState!==void 0&&rootState.routeNames.includes(r.name));})){console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");return;}if(index>previousIndex){var action=getActionFromStateRef.current(state,configRef.current);if(action!==undefined){try{navigation.dispatch(action);}catch(e){console.warn(\"An error occurred when trying to handle the link '\"+path+\"': \"+(typeof e==='object'&&e!=null&&'message'in e?e.message:e));}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,ref]);React.useEffect(function(){var _ref$current;if(!enabled){return;}var getPathForRoute=function getPathForRoute(route,state){if(route!==null&&route!==void 0&&route.path){var stateForPath=getStateFromPathRef.current(route.path,configRef.current);if(stateForPath){var focusedRoute=findFocusedRoute(stateForPath);if(focusedRoute&&focusedRoute.name===route.name&&isEqual(focusedRoute.params,route.params)){return route.path;}}}return getPathFromStateRef.current(state,configRef.current);};if(ref.current){var state=ref.current.getRootState();if(state){var route=findFocusedRoute(state);var path=getPathForRoute(route,state);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path:path,state:state});}}var onStateChange=function _callee2(){var navigation,previousState,state,pendingPath,route,path,_findMatchingState,_findMatchingState2,previousFocusedState,focusedState,historyDelta,nextIndex,currentIndex;return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:navigation=ref.current;if(!(!navigation||!enabled)){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:previousState=previousStateRef.current;state=navigation.getRootState();if(state){_context2.next=7;break;}return _context2.abrupt(\"return\");case 7:pendingPath=pendingPopStatePathRef.current;route=findFocusedRoute(state);path=getPathForRoute(route,state);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;_findMatchingState=findMatchingState(previousState,state),_findMatchingState2=_slicedToArray(_findMatchingState,2),previousFocusedState=_findMatchingState2[0],focusedState=_findMatchingState2[1];if(!(previousFocusedState&&focusedState&&path!==pendingPath)){_context2.next=40;break;}historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(!(historyDelta>0)){_context2.next=19;break;}history.push({path:path,state:state});_context2.next=38;break;case 19:if(!(historyDelta<0)){_context2.next=37;break;}nextIndex=history.backIndex({path:path});currentIndex=history.index;_context2.prev=22;if(!(nextIndex!==-1&&nextIndex<currentIndex)){_context2.next=28;break;}_context2.next=26;return _regeneratorRuntime.awrap(history.go(nextIndex-currentIndex));case 26:_context2.next=30;break;case 28:_context2.next=30;return _regeneratorRuntime.awrap(history.go(historyDelta));case 30:history.replace({path:path,state:state});_context2.next=35;break;case 33:_context2.prev=33;_context2.t0=_context2[\"catch\"](22);case 35:_context2.next=38;break;case 37:history.replace({path:path,state:state});case 38:_context2.next=41;break;case 40:history.replace({path:path,state:state});case 41:case\"end\":return _context2.stop();}}},null,null,[[22,33]],Promise);};return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.addListener('state',series(onStateChange));});return{getInitialState:getInitialState};}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getActionFromState","getPathFromState","getStateFromPath","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","cb","handling","queue","callback","last","linkingHandlers","enabled","getActionFromStateDefault","React","process","console","handler","Symbol","index","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","server","getInitialState","location","window","path","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","history","navigation","ref","previousIndex","record","state","rootState","r","action","e","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}