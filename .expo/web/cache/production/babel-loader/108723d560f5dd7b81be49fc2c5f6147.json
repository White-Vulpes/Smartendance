{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import useOnPreventRemove,{shouldPreventRemove}from\"./useOnPreventRemove\";export default function useOnAction(_ref){var router=_ref.router,getState=_ref.getState,setState=_ref.setState,key=_ref.key,actionListeners=_ref.actionListeners,beforeRemoveListeners=_ref.beforeRemoveListeners,routerConfigOptions=_ref.routerConfigOptions,emitter=_ref.emitter;var _React$useContext=React.useContext(NavigationBuilderContext),onActionParent=_React$useContext.onAction,onRouteFocusParent=_React$useContext.onRouteFocus,addListenerParent=_React$useContext.addListener,onDispatchAction=_React$useContext.onDispatchAction;var routerConfigOptionsRef=React.useRef(routerConfigOptions);React.useEffect(function(){routerConfigOptionsRef.current=routerConfigOptions;});var onAction=React.useCallback(function(action){var visitedNavigators=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Set();var state=getState();if(visitedNavigators.has(state.key)){return false;}visitedNavigators.add(state.key);if(typeof action.target!=='string'||action.target===state.key){var result=router.getStateForAction(state,action,routerConfigOptionsRef.current);result=result===null&&action.target===state.key?state:result;if(result!==null){onDispatchAction(action,state===result);if(state!==result){var isPrevented=shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,result.routes,action);if(isPrevented){return true;}setState(result);}if(onRouteFocusParent!==undefined){var shouldFocus=router.shouldActionChangeFocus(action);if(shouldFocus&&key!==undefined){onRouteFocusParent(key);}}return true;}}if(onActionParent!==undefined){if(onActionParent(action,visitedNavigators)){return true;}}for(var i=actionListeners.length-1;i>=0;i--){var listener=actionListeners[i];if(listener(action,visitedNavigators)){return true;}}return false;},[actionListeners,beforeRemoveListeners,emitter,getState,key,onActionParent,onDispatchAction,onRouteFocusParent,router,setState]);useOnPreventRemove({getState:getState,emitter:emitter,beforeRemoveListeners:beforeRemoveListeners});React.useEffect(function(){return addListenerParent===null||addListenerParent===void 0?void 0:addListenerParent('action',onAction);},[addListenerParent,onAction]);return onAction;}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["emitter","onAction","onRouteFocus","addListener","onDispatchAction","React","routerConfigOptionsRef","visitedNavigators","state","getState","action","result","router","isPrevented","shouldPreventRemove","setState","onRouteFocusParent","shouldFocus","key","onActionParent","i","actionListeners","listener","useOnPreventRemove","beforeRemoveListeners","addListenerParent"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}