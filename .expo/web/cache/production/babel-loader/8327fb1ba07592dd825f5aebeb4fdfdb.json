{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"key\",\"routeNames\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import checkDuplicateRouteNames from\"./checkDuplicateRouteNames\";import checkSerializable from\"./checkSerializable\";import{NOT_INITIALIZED_ERROR}from\"./createNavigationContainerRef\";import EnsureSingleNavigator from\"./EnsureSingleNavigator\";import findFocusedRoute from\"./findFocusedRoute\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationContainerRefContext from\"./NavigationContainerRefContext\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import NavigationStateContext from\"./NavigationStateContext\";import UnhandledActionContext from\"./UnhandledActionContext\";import useChildListeners from\"./useChildListeners\";import useEventEmitter from\"./useEventEmitter\";import useKeyedChildListeners from\"./useKeyedChildListeners\";import useOptionsGetters from\"./useOptionsGetters\";import{ScheduleUpdateContext}from\"./useScheduleUpdate\";import useSyncState from\"./useSyncState\";var serializableWarnings=[];var duplicateNameWarnings=[];var getPartialState=function getPartialState(state){if(state===undefined){return;}var key=state.key,routeNames=state.routeNames,partialState=_objectWithoutProperties(state,_excluded);return _objectSpread(_objectSpread({},partialState),{},{stale:true,routes:state.routes.map(function(route){if(route.state===undefined){return route;}return _objectSpread(_objectSpread({},route),{},{state:getPartialState(route.state)});})});};var BaseNavigationContainer=React.forwardRef(function BaseNavigationContainer(_ref,ref){var initialState=_ref.initialState,onStateChange=_ref.onStateChange,onUnhandledAction=_ref.onUnhandledAction,independent=_ref.independent,children=_ref.children;var parent=React.useContext(NavigationStateContext);if(!parent.isDefault&&!independent){throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");}var _useSyncState=useSyncState(function(){return getPartialState(initialState==null?undefined:initialState);}),_useSyncState2=_slicedToArray(_useSyncState,5),state=_useSyncState2[0],getState=_useSyncState2[1],setState=_useSyncState2[2],scheduleUpdate=_useSyncState2[3],flushUpdates=_useSyncState2[4];var isFirstMountRef=React.useRef(true);var navigatorKeyRef=React.useRef();var getKey=React.useCallback(function(){return navigatorKeyRef.current;},[]);var setKey=React.useCallback(function(key){navigatorKeyRef.current=key;},[]);var _useChildListeners=useChildListeners(),listeners=_useChildListeners.listeners,addListener=_useChildListeners.addListener;var _useKeyedChildListene=useKeyedChildListeners(),keyedListeners=_useKeyedChildListene.keyedListeners,addKeyedListener=_useKeyedChildListene.addKeyedListener;var dispatch=React.useCallback(function(action){if(listeners.focus[0]==null){console.error(NOT_INITIALIZED_ERROR);}else{listeners.focus[0](function(navigation){return navigation.dispatch(action);});}},[listeners.focus]);var canGoBack=React.useCallback(function(){if(listeners.focus[0]==null){return false;}var _listeners$focus$=listeners.focus[0](function(navigation){return navigation.canGoBack();}),result=_listeners$focus$.result,handled=_listeners$focus$.handled;if(handled){return result;}else{return false;}},[listeners.focus]);var resetRoot=React.useCallback(function(state){var _state$key,_keyedListeners$getSt,_keyedListeners$getSt2;var target=(_state$key=state===null||state===void 0?void 0:state.key)!==null&&_state$key!==void 0?_state$key:(_keyedListeners$getSt=(_keyedListeners$getSt2=keyedListeners.getState).root)===null||_keyedListeners$getSt===void 0?void 0:_keyedListeners$getSt.call(_keyedListeners$getSt2).key;if(target==null){console.error(NOT_INITIALIZED_ERROR);}else{listeners.focus[0](function(navigation){return navigation.dispatch(_objectSpread(_objectSpread({},CommonActions.reset(state)),{},{target:target}));});}},[keyedListeners.getState,listeners.focus]);var getRootState=React.useCallback(function(){var _keyedListeners$getSt3,_keyedListeners$getSt4;return(_keyedListeners$getSt3=(_keyedListeners$getSt4=keyedListeners.getState).root)===null||_keyedListeners$getSt3===void 0?void 0:_keyedListeners$getSt3.call(_keyedListeners$getSt4);},[keyedListeners.getState]);var getCurrentRoute=React.useCallback(function(){var state=getRootState();if(state==null){return undefined;}var route=findFocusedRoute(state);return route;},[getRootState]);var emitter=useEventEmitter();var _useOptionsGetters=useOptionsGetters({}),addOptionsGetter=_useOptionsGetters.addOptionsGetter,getCurrentOptions=_useOptionsGetters.getCurrentOptions;var navigation=React.useMemo(function(){return _objectSpread(_objectSpread(_objectSpread({},Object.keys(CommonActions).reduce(function(acc,name){acc[name]=function(){return dispatch(CommonActions[name].apply(CommonActions,arguments));};return acc;},{})),emitter.create('root')),{},{dispatch:dispatch,resetRoot:resetRoot,isFocused:function isFocused(){return true;},canGoBack:canGoBack,getParent:function getParent(){return undefined;},getState:function getState(){return stateRef.current;},getRootState:getRootState,getCurrentRoute:getCurrentRoute,getCurrentOptions:getCurrentOptions,isReady:function isReady(){return listeners.focus[0]!=null;}});},[canGoBack,dispatch,emitter,getCurrentOptions,getCurrentRoute,getRootState,listeners.focus,resetRoot]);React.useImperativeHandle(ref,function(){return navigation;},[navigation]);var onDispatchAction=React.useCallback(function(action,noop){emitter.emit({type:'__unsafe_action__',data:{action:action,noop:noop,stack:stackRef.current}});},[emitter]);var lastEmittedOptionsRef=React.useRef();var onOptionsChange=React.useCallback(function(options){if(lastEmittedOptionsRef.current===options){return;}lastEmittedOptionsRef.current=options;emitter.emit({type:'options',data:{options:options}});},[emitter]);var stackRef=React.useRef();var builderContext=React.useMemo(function(){return{addListener:addListener,addKeyedListener:addKeyedListener,onDispatchAction:onDispatchAction,onOptionsChange:onOptionsChange,stackRef:stackRef};},[addListener,addKeyedListener,onDispatchAction,onOptionsChange]);var scheduleContext=React.useMemo(function(){return{scheduleUpdate:scheduleUpdate,flushUpdates:flushUpdates};},[scheduleUpdate,flushUpdates]);var isInitialRef=React.useRef(true);var getIsInitial=React.useCallback(function(){return isInitialRef.current;},[]);var context=React.useMemo(function(){return{state:state,getState:getState,setState:setState,getKey:getKey,setKey:setKey,getIsInitial:getIsInitial,addOptionsGetter:addOptionsGetter};},[state,getState,setState,getKey,setKey,getIsInitial,addOptionsGetter]);var onStateChangeRef=React.useRef(onStateChange);var stateRef=React.useRef(state);React.useEffect(function(){isInitialRef.current=false;onStateChangeRef.current=onStateChange;stateRef.current=state;});React.useEffect(function(){var hydratedState=getRootState();if(process.env.NODE_ENV!=='production'){if(hydratedState!==undefined){var serializableResult=checkSerializable(hydratedState);if(!serializableResult.serializable){var location=serializableResult.location,reason=serializableResult.reason;var path='';var pointer=hydratedState;var params=false;for(var i=0;i<location.length;i++){var curr=location[i];var prev=location[i-1];pointer=pointer[curr];if(!params&&curr==='state'){continue;}else if(!params&&curr==='routes'){if(path){path+=' > ';}}else if(!params&&typeof curr==='number'&&prev==='routes'){var _pointer;path+=(_pointer=pointer)===null||_pointer===void 0?void 0:_pointer.name;}else if(!params){path+=\" > \"+curr;params=true;}else{if(typeof curr==='number'||/^[0-9]+$/.test(curr)){path+=\"[\"+curr+\"]\";}else if(/^[a-z$_]+$/i.test(curr)){path+=\".\"+curr;}else{path+=\"[\"+JSON.stringify(curr)+\"]\";}}}var message=\"Non-serializable values were found in the navigation state. Check:\\n\\n\"+path+\" (\"+reason+\")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";if(!serializableWarnings.includes(message)){serializableWarnings.push(message);console.warn(message);}}var duplicateRouteNamesResult=checkDuplicateRouteNames(hydratedState);if(duplicateRouteNamesResult.length){var _message=\"Found screens with the same name nested inside one another. Check:\\n\"+duplicateRouteNamesResult.map(function(locations){return\"\\n\"+locations.join(', ');})+\"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";if(!duplicateNameWarnings.includes(_message)){duplicateNameWarnings.push(_message);console.warn(_message);}}}}emitter.emit({type:'state',data:{state:state}});if(!isFirstMountRef.current&&onStateChangeRef.current){onStateChangeRef.current(hydratedState);}isFirstMountRef.current=false;},[getRootState,emitter,state]);var defaultOnUnhandledAction=React.useCallback(function(action){if(process.env.NODE_ENV==='production'){return;}var payload=action.payload;var message=\"The action '\"+action.type+\"'\"+(payload?\" with payload \"+JSON.stringify(action.payload):'')+\" was not handled by any navigator.\";switch(action.type){case'NAVIGATE':case'PUSH':case'REPLACE':case'JUMP_TO':if(payload!==null&&payload!==void 0&&payload.name){message+=\"\\n\\nDo you have a screen named '\"+payload.name+\"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";}else{message+=\"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";}break;case'GO_BACK':case'POP':case'POP_TO_TOP':message+=\"\\n\\nIs there any screen to go back to?\";break;case'OPEN_DRAWER':case'CLOSE_DRAWER':case'TOGGLE_DRAWER':message+=\"\\n\\nIs your screen inside a Drawer navigator?\";break;}message+=\"\\n\\nThis is a development-only warning and won't be shown in production.\";console.error(message);},[]);var element=React.createElement(NavigationContainerRefContext.Provider,{value:navigation},React.createElement(ScheduleUpdateContext.Provider,{value:scheduleContext},React.createElement(NavigationBuilderContext.Provider,{value:builderContext},React.createElement(NavigationStateContext.Provider,{value:context},React.createElement(UnhandledActionContext.Provider,{value:onUnhandledAction!==null&&onUnhandledAction!==void 0?onUnhandledAction:defaultOnUnhandledAction},React.createElement(EnsureSingleNavigator,null,children))))));if(independent){element=React.createElement(NavigationRouteContext.Provider,{value:undefined},React.createElement(NavigationContext.Provider,{value:undefined},element));}return element;});export default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","partialState","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","navigatorKeyRef","getKey","setKey","key","addListener","useChildListeners","addKeyedListener","useKeyedChildListeners","dispatch","action","listeners","console","navigation","canGoBack","handled","resetRoot","target","CommonActions","keyedListeners","getRootState","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","getCurrentOptions","useOptionsGetters","acc","isFocused","getParent","getState","stateRef","isReady","onDispatchAction","type","data","noop","stack","stackRef","current","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","scheduleUpdate","flushUpdates","isInitialRef","getIsInitial","context","setState","addOptionsGetter","onStateChangeRef","hydratedState","process","serializableResult","checkSerializable","reason","path","pointer","params","i","location","curr","prev","JSON","message","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","defaultOnUnhandledAction","payload","element","onUnhandledAction","undefined"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}